{"version":3,"sources":["../node_modules/@material-ui/icons/Add.js","views/dashboard/Transaction.js","views/dashboard/TransactionLog.js","views/dashboard/Contract.js","views/dashboard/AllContracts.js","views/dashboard/Dashboard.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","value","default","React","_default","createElement","d","Transaction","props","state","typeOfCard","message","this","to","myAddress","amount","myName","friendsName","accent","color","Component","TransactionLog","allTransactions","items","entries","index","push","className","Contract","handleOpenTransactionLog","setState","openTransactionLog","handleCloseTransactionLog","handleOpenAddDebt","openAddDebt","handleCloseAddDebt","getNameFromAddress","a","friendsAddress","debtor","playerOne","creditor","friendsProfile","web3","eth","profileAbi","methods","getName","call","debt","bind","headerName","cardTextStyle","size","onClick","name","Dialog","open","onClose","aria-labelledby","DialogTitle","id","DialogContent","address","fontSize","AddDebt","friendAddress","handleClose","AllContracts","onCheckMyContracts","profile","getContracts","contractsList","length","allContracts","getContractsByIndex","x","JSON","parse","compiledBinaryContract","interface","tempC","getCurrentCreditorAddress","creditorName","getCurrentDebtorAddress","debtorName","getCurrentDebtAmount","debtAmount","getAllTransations","binaryContractInstance","newListInformation","listInformation","ethereum","window","enable","isContractListEmpty","Dashboard","addFriendFormSubmit","event","makeBatchRequest","calls","batch","BatchRequest","map","Promise","res","rej","req","request","from","accounts","gas","err","data","add","execute","preventDefault","getAccounts","addFriendRequest","send","addFriendRequestNotRestricted","onCheckMyFriends","getFriends","friendsList","onRemoveFriendsList","console","log","removeAllFriends","onSubmitAddDebtRequest","playerTwo","addDebtRequest","providedAmount","addDebtRequestNotRestricted","onSubmitConfirmDebtRequest","getAllExchanges","myExchanges","choosenRequest","transaction","myContracts","contractExisted","i","existedContractAddress","currentBinaryContract","getCurrentDebt","currentDebtOfCurrentBinaryContract","accountsOfTransaction","includes","String","addTransaction","createBinaryContract","getLastContract","deployedContractAddress","currentBinaryContractAddress","getZeroAddress","newContractAddress","confirmDebtRequest","confirmDebtRequestNotRestricted","onCheckMyExchanges","undefined","resolve","exchanges","then","onRemoveExchangesList","removeAllExchanges","onRemoveContractsList","removeContracts","friendRequestIndex","contractAndProps","onChangeFormInput","onSubmitConfirmFriendRequest","updateRemovedFriends","friendExchanges","friendExchange","exchangePurpose","exchangeDetails","source","confirmFriendRequest","confirmFriendRequestNotRestricted","target","xs","md","xl"],"mappings":"8KAEA,IAAIA,EAAyBC,EAAQ,KAEjCC,EAA0BD,EAAQ,KAEtCE,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAElB,IAAIC,EAAQN,EAAwBD,EAAQ,IAIxCQ,GAAW,EAFMT,EAAuBC,EAAQ,MAElBM,SAAuBC,EAAME,cAAc,OAAQ,CACnFC,EAAG,wCACD,OAEJN,EAAQE,QAAUE,G,wTCcHG,EA9Bf,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,GAHI,EADrB,qDASI,IAAIC,EAAYC,EAWhB,OAVIC,KAAKJ,MAAMK,KAAOD,KAAKJ,MAAMM,WAC/BJ,EAAa,UACbC,EAAO,UAAMC,KAAKJ,MAAMO,OAAjB,qBAAoCH,KAAKJ,MAAMQ,OAA/C,4BACDJ,KAAKJ,MAAMS,eAEjBP,EAAa,SACbC,EAAO,UAAMC,KAAKJ,MAAMO,OAAjB,qBAAoCH,KAAKJ,MAAMS,YAA/C,4BACDL,KAAKJ,MAAMQ,SAIjB,8BACE,cAAC,IAAD,CAAgBE,OAAQR,EAAYS,MAAOT,EAA3C,SACGC,UAvBX,GAAiCS,aCsClBC,EApCf,kDACE,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXa,gBAAiBd,EAAMc,iBAJR,EADrB,qDAYI,IADA,IAAMC,EAAQ,GACd,MAA6BzB,OAAO0B,QAAQZ,KAAKH,MAAMa,iBAAvD,eAAyE,CAAC,IAAD,sBAA7DG,EAA6D,KAAtDxB,EAAsD,KAEvEsB,EAAMG,KACJ,cAAC,EAAD,aAEEV,OAAQJ,KAAKJ,MAAMQ,OACnBF,UAAWF,KAAKJ,MAAMM,UACtBG,YAAaL,KAAKJ,MAAMS,aACpBhB,GAJCwB,IAQX,OACE,8BACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAWE,UAAU,aAArB,SACE,cAAC,IAAD,CAAYT,QAAM,EAAlB,SAAoBK,cA5BhC,GAAoCH,aC+KrBQ,EAnKf,kDACE,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IA2BRqB,yBAA2B,WACzB,EAAKC,SAAS,CACZC,oBAAoB,KA9BL,EAiCnBC,0BAA4B,WAC1B,EAAKF,SAAS,CACZC,oBAAoB,KAnCL,EAuCnBE,kBAAoB,WAClB,EAAKH,SAAS,CACZI,aAAa,KAzCE,EA4CnBC,mBAAqB,WACnB,EAAKL,SAAS,CACZI,aAAa,KA9CE,EAkDnBE,mBAlDmB,sBAkDE,8BAAAC,EAAA,6DACbC,EACJ,EAAK9B,MAAM+B,SAAW,EAAK/B,MAAMgC,UAC7B,EAAKhC,MAAMiC,SACX,EAAKjC,MAAM+B,OACjB,EAAKT,SAAS,CAAEQ,eAAgBA,IAC5BI,EAAiB,IAAIC,IAAKC,IAAIhB,SAASiB,IAAYP,GANpC,gBAQEI,EAAeI,QAAQC,UAAUC,OARnC,yBAQjB/B,YARiB,WAOda,SAPc,2DA/CnB,EAAKrB,MAAQ,CACXa,gBAAiBd,EAAMc,gBACvBN,OAAQR,EAAMQ,OACdN,WAAYF,EAAME,WAClB+B,SAAUjC,EAAMiC,SAChBF,OAAQ/B,EAAM+B,OACdU,KAAMzC,EAAMyC,KACZlB,oBAAoB,EACpBG,aAAa,EACbjB,YAAa,GACbqB,eAAgB,IAGlB,EAAKT,yBAA2B,EAAKA,yBAAyBqB,KAA9B,gBAChC,EAAKlB,0BAA4B,EAAKA,0BAA0BkB,KAA/B,gBACjC,EAAKjB,kBAAoB,EAAKA,kBAAkBiB,KAAvB,gBACzB,EAAKf,mBAAqB,EAAKA,mBAAmBe,KAAxB,gBAC1B,EAAKd,mBAAqB,EAAKA,mBAAmBc,KAAxB,gBApBT,EADrB,gEAyBItC,KAAKwB,uBAzBT,+BAiEI,IAAIe,EACFvC,KAAKH,MAAMO,SAAWJ,KAAKH,MAAMgC,SAC7B7B,KAAKJ,MAAMQ,OACXJ,KAAKH,MAAMQ,YACbN,EAAU,GACVyC,EAAgB,GAkBpB,MAjB8B,WAA1BxC,KAAKH,MAAMC,YACb0C,EAAgB,uBAChBzC,EACE,eAAC,IAAD,WACE,wCADF,IACkBwC,OAIpBC,EAAgB,yBAChBzC,EACE,eAAC,IAAD,WACGwC,EACD,uBAFF,IAES,6CAMX,8BACE,eAAC,IAAD,CAAOxB,UAAWyB,EAAlB,UACGzC,EACD,eAAC,IAAD,WACE,4BAAYgB,UAAU,iBAAtB,SACE,6BAAKf,KAAKH,MAAMwC,SAElB,yBAAQtB,UAAU,+BAAlB,UACE,eAAC,IAAD,CACE0B,KAAK,KACLlC,MAAM,OACNQ,UAAU,+BACV2B,QAAS1C,KAAKiB,yBAJhB,UAME,cAAC,IAAD,CAAO0B,KAAK,iBANd,mBAQA,eAACC,EAAA,EAAD,CACEC,KAAM7C,KAAKH,MAAMsB,mBACjB2B,QAAS9C,KAAKoB,0BACd2B,kBAAgB,oBAHlB,UAKE,eAACC,EAAA,EAAD,CAAaC,GAAG,oBAAoBlC,UAAU,eAA9C,6BAEE,qBAAKA,UAAU,sBAAf,SACE,cAAC,IAAD,CACEA,UAAU,qBACV2B,QAAS1C,KAAKoB,0BAFhB,SAIE,cAAC,IAAD,CAAOuB,KAAK,wBAIlB,cAACO,EAAA,EAAD,UACE,cAAC,EAAD,CACE9C,OAAQJ,KAAKH,MAAMO,OACnBF,UAAWF,KAAKJ,MAAMuD,QACtBzC,gBAAiBV,KAAKH,MAAMa,gBAC5BL,YAAaL,KAAKH,MAAMQ,mBAK9B,eAAC,IAAD,CACEoC,KAAK,KACLlC,MAAM,YACNQ,UAAU,+BACV2B,QAAS1C,KAAKqB,kBAJhB,UAOE,cAAC,IAAD,CAAS+B,SAAS,UAPpB,cAUA,eAACR,EAAA,EAAD,CACEC,KAAM7C,KAAKH,MAAMyB,YACjBwB,QAAS9C,KAAKuB,mBACdwB,kBAAgB,oBAHlB,UAKE,cAACC,EAAA,EAAD,CAAaC,GAAG,oBAAhB,0BACA,cAACC,EAAA,EAAD,UACE,cAACG,EAAA,EAAD,2BACMrD,KAAKJ,OADX,IAEE0D,cAAetD,KAAKH,MAAM6B,eAC1B6B,YAAavD,KAAKuB,0CAvJtC,GAA8Bf,aCsFfgD,EAlGf,kDACE,WAAY5D,GAAQ,IAAD,8BACjB,cAAMA,IAaR6D,mBAdmB,sBAcE,gDAAAhC,EAAA,6EAEI,EAAK7B,MAAM8D,QAAQxB,QAAQyB,eAAevB,OAF9C,4BAEjBwB,cAFiB,WACd1C,SADc,mBAIb2C,EAAS,EAAKhE,MAAM+D,cAAcC,QAE3B,GANM,iBAORhD,EAAQ,EAPA,YAOGA,EAAQgD,GAPX,wDAUR,EAAKhE,MAAMiE,cAVH,UAWL,EAAKlE,MAAM8D,QAAQxB,QAAQ6B,oBAAoBlD,GAAOuB,OAXjD,4EASb0B,aATa,WAQV5C,SARU,wBAOmBL,IAPnB,uBAgBfmD,EAAI,EAhBW,QAAAvC,EAAA,KAiBT,EAAK5B,MAAM+D,eAjBF,wDAiBdI,EAjBc,sBAkBC,IAAIjC,IAAKC,IAAIhB,SAC7BiD,KAAKC,MAAM,EAAKtE,MAAMuE,uBAAuBC,WAC7C,EAAKvE,MAAM+D,cAAcI,IApBV,eAkBbK,EAlBa,iBAsBQA,EAAMnC,QAAQoC,4BAA4BlC,OAtBlD,eAsBbmC,EAtBa,iBAuBMF,EAAMnC,QAAQsC,0BAA0BpC,OAvB9C,eAuBbqC,EAvBa,iBAwBMJ,EAAMnC,QAAQwC,uBAAuBtC,OAxB3C,eAwBbuC,EAxBa,iBAyBWN,EAAMnC,QAAQ0C,oBAAoBxC,OAzB7C,QAyBb1B,EAzBa,OA2BbZ,EACFyE,IAAiB,EAAK3E,MAAMgC,UAAY,SAAW,UACjDiD,EAAyB,CAC3BnE,gBAAiBA,EACjBZ,WAAYA,EACZ+B,SAAU0C,EACV5C,OAAQ8C,EACRpC,KAAMsC,GAEJG,EApCa,2BAqCZ,EAAKjF,MAAMkF,iBArCC,kBAsCdf,EAAIa,IAEP,EAAK3D,SAAS,CACZ6D,gBAAiBD,IAzCF,4DAXnB,EAAKjF,MAAQ,CACX+D,cAAe,GACfE,aAAc,GACdiB,gBAAiB,IAEnB,EAAKtB,mBAAqB,EAAKA,mBAAmBnB,KAAxB,gBART,EADrB,mLAiE4B,qBADpB0C,EAAWC,OAAOD,UAhE1B,gCAkEYA,EAASE,SAlErB,OAqEIlF,KAAKyD,qBArET,qIA4EI,IADA,IAAM9C,EAAQ,GACd,MAA6BzB,OAAO0B,QAAQZ,KAAKH,MAAMkF,iBAAvD,eAAyE,CAAC,IAAD,sBAA7DlE,EAA6D,KAAtDxB,EAAsD,KACvEsB,EAAMG,KACJ,cAAC,EAAD,yBAEEZ,UAAWF,KAAKJ,MAAMgC,WAClB5B,KAAKJ,OACLP,GAHCwB,IAQX,IAAMsE,EAAsBnF,KAAKH,MAAM+D,cAAcC,OAErD,OACE,8BAE2B,IAAxBsB,EAA4B,qDAA+BxE,QA5FpE,GAAkCH,aCqCrB4E,G,OAAb,kDACE,WAAYxF,GAAQ,IAAD,8BACjB,cAAMA,IA6FRyF,oBA9FmB,uCA8FG,WAAOC,GAAP,QAwBXC,EAxBW,SAAA9D,EAAA,6DAwBX8D,EAxBW,SAwBMC,GACxB,IAAIC,EAAQ,IAAI1D,IAAK2D,aACrBF,EAAMG,KAAI,SAACvD,GACT,OAAO,IAAIwD,SAAQ,SAACC,EAAKC,GACvB,IAAIC,EAAM3D,EAAK4D,QACb,CAAEC,KAAMC,EAAS,GAAIC,IAAK,YAC1B,SAACC,EAAKC,GACAD,EAAKN,EAAIM,GACRP,EAAIQ,MAGbZ,EAAMa,IAAIP,SAGdN,EAAMc,WArCRjB,EAAMkB,iBADc,SAIGzE,IAAKC,IAAIyE,cAJZ,OAIdP,EAJc,OAMdpE,EAAiB,IAAIC,IAAKC,IAAIhB,SAClCiB,IACA,EAAKpC,MAAM6B,gBAKb6D,EAAiB,CAEf,EAAK1F,MAAM6D,QAAQxB,QAAQwE,iBACzB,EAAK7G,MAAM6B,eACX,EAAK7B,MAAM8C,MACXgE,KACF7E,EAAeI,QAAQ0E,8BACrB,EAAK/G,MAAMsD,QACX,EAAKtD,MAAM8C,MACXgE,OAtBgB,2CA9FH,wDAwMnBE,iBAxMmB,sBAwMA,sBAAApF,EAAA,6EAII,EAAK5B,MAAM6D,QAAQxB,QAAQ4E,aAAa1E,OAJ5C,yBAIf2E,YAJe,WAGZ7F,SAHY,2DAxMA,EAmOnB8F,oBAnOmB,sBAmOG,qBAiBXzB,EAjBW,SAAA9D,EAAA,6DAiBX8D,EAjBW,SAiBMC,GACxB,IAAIC,EAAQ,IAAI1D,IAAK2D,aAErBuB,QAAQC,IAAI,gCAAkChB,EAAS,IACvDV,EAAMG,KAAI,SAACvD,GACT,OAAO,IAAIwD,SAAQ,SAACC,EAAKC,GACvB,IAAIC,EAAM3D,EAAK4D,QACb,CAAEC,KAAMC,EAAS,GAAIC,IAAK,YAC1B,SAACC,EAAKC,GACAD,EAAKN,EAAIM,GACRP,EAAIQ,MAGbZ,EAAMa,IAAIP,SAGdN,EAAMc,WAjCY,SAIGxE,IAAKC,IAAIyE,cAJZ,OAIdP,EAJc,OAOdpE,EAAiB,IAAIC,IAAKC,IAAIhB,SAClCiB,IACA,EAAKpC,MAAM6B,gBAGb6D,EAAiB,CAEf,EAAK1F,MAAM6D,QAAQxB,QAAQiF,mBAAmBR,KAC9C7E,EAAeI,QAAQiF,mBAAmBR,OAfxB,2CAnOH,EA6QnBS,uBA7QmB,uCA6QM,WAAO9B,GAAP,QA4BdC,EA5Bc,SAAA9D,EAAA,6DA4Bd8D,EA5Bc,SA4BGC,GACxB,IAAIC,EAAQ,IAAI1D,IAAK2D,aAGrBF,EAAMG,KAAI,SAACvD,GACT,OAAO,IAAIwD,SAAQ,SAACC,EAAKC,GACvB,IAAIC,EAAM3D,EAAK4D,QACb,CAAEC,KAAMC,EAAS,GAAIC,IAAK,YAC1B,SAACC,EAAKC,GACAD,EAAKN,EAAIM,GACRP,EAAIQ,MAGbZ,EAAMa,IAAIP,SAGdN,EAAMc,WA3CRjB,EAAMkB,iBADiB,SAIAzE,IAAKC,IAAIyE,cAJT,OAIjBP,EAJiB,OAOjBpE,EAAiB,IAAIC,IAAKC,IAAIhB,SAClCiB,IACA,EAAKpC,MAAMwH,WAGb9B,EAAiB,CAGf,EAAK1F,MAAM6D,QAAQxB,QAAQoF,eACzB,EAAKzH,MAAMwH,UACX,EAAKxH,MAAM+B,UACX,EAAK/B,MAAM0H,eACX,EAAK1H,MAAMwH,WACXV,KACF7E,EAAeI,QAAQsF,4BACrB,EAAK3H,MAAM+B,UACX,EAAK/B,MAAM+B,UACX,EAAK/B,MAAM0H,eACX,EAAK1H,MAAMwH,WACXV,OA1BmB,2CA7QN,wDAgUnBc,2BAhUmB,uCAgUU,WAAOnC,GAAP,gCA+GlBC,EA/GkB,SAAA9D,EAAA,6DA+GlB8D,EA/GkB,SA+GDC,GACxB,IAAIC,EAAQ,IAAI1D,IAAK2D,aAGrBF,EAAMG,KAAI,SAACvD,GACT,OAAO,IAAIwD,SAAQ,SAACC,EAAKC,GACvB,IAAIC,EAAM3D,EAAK4D,QACb,CAAEC,KAAMC,EAAS,GAAIC,IAAK,YAC1B,SAACC,EAAKC,GACAD,EAAKN,EAAIM,GACRP,EAAIQ,MAGbZ,EAAMa,IAAIP,SAGdN,EAAMc,WA9HRjB,EAAMkB,iBADqB,SAIJzE,IAAKC,IAAIyE,cAJL,cAIrBP,EAJqB,gBAOH,EAAKrG,MAAM6D,QAAQxB,QAAQwF,kBAAkBtF,OAP1C,cAOvBuF,EAPuB,OAQvBC,EAAiBD,EAAY,GAEjC,EAAKzG,SAAS,CAAEmG,UAAWO,EAAeC,YAAY5B,OACtD,EAAK/E,SAAS,CAAEU,UAAWgG,EAAeC,YAAY5H,KACtD,EAAKiB,SAAS,CAAEqG,eAAgBK,EAAeC,YAAY1H,SAZhC,UAcH,EAAKN,MAAM6D,QAAQxB,QAAQyB,eAAevB,OAdvC,QAcvB0F,EAduB,OAkBvBC,GAAkB,EAEbC,EAAI,EApBc,aAoBXA,EAAIF,EAAYjE,QApBL,kCAsBS,IAAI9B,IAAKC,IAAIhB,SAC7CiD,KAAKC,MAAM,EAAKrE,MAAMsE,uBAAuBC,WAC5C6D,EAAyBH,EAAYE,IAxBf,eAsBrBE,EAtBqB,iBA2BsBA,EAAsBhG,QAClEiG,iBACA/F,OA7BsB,WA2BrBgG,EA3BqB,SA8BrBC,EAAwB,CAAC,EAAKxI,MAAM+B,UAAW,EAAK/B,MAAMwH,YAGtCiB,SACpBC,OAAOH,EAAmCzG,WAE5C0G,EAAsBC,SACpBC,OAAOH,EAAmCvG,WArCrB,kCA0CjBqG,EAAsBhG,QACzBsG,eACC,EAAK3I,MAAM+B,UACX,EAAK/B,MAAM0H,eACX,EAAK1H,MAAMwH,WAEZV,KAAK,CACJV,KAAMC,EAAS,GACfC,IAAK,YAlDc,eAqDvB4B,GAAkB,EArDK,6BAoBaC,IApBb,2BA2DtBD,EA3DsB,kCA6DnB,EAAKlI,MAAM6D,QAAQxB,QACtBuG,qBACC,EAAK5I,MAAM+B,UACX,EAAK/B,MAAM0H,eACX,EAAK1H,MAAMwH,WAEZV,KAAK,CACJV,KAAMC,EAAS,GACfC,IAAK,YArEgB,eAwEzBc,QAAQC,IAAI,6CAxEa,UA0EO,EAAKrH,MAAM6D,QAAQxB,QAChDwG,kBACAtG,OA5EsB,QA0EzBuG,EA1EyB,sBA+EvBC,EAA+Bb,EAC/BE,EACAU,EAjFuB,UAkFO,IAAI5G,IAAKC,IAAIhB,SAC7CiD,KAAKC,MAAM,EAAKrE,MAAMsE,uBAAuBC,WAC7CwE,GApFyB,kBAuFvB9G,EAAiB,IAAIC,IAAKC,IAAIhB,SAChCiB,IACA,EAAKpC,MAAMwH,YAIYU,EA7FE,kCA8FjB,EAAKlI,MAAM6D,QAAQxB,QAAQ2G,iBAAiBzG,OA9F3B,iDA+FvBuG,EA/FuB,QA6FvBG,EA7FuB,KAiG3BvD,EAAiB,CAKf,EAAK1F,MAAM6D,QAAQxB,QAAQ6G,mBAAmB,GAAGpC,KAIjD7E,EAAeI,QAAQ8G,gCACrB,EACAF,GACAnC,OA7GuB,4CAhUV,wDAscnBsC,mBAtcmB,sBAscE,sBAAAxH,EAAA,sEAGV,EAAK5B,MAAM6D,QAAQxB,QAAQwF,kBAAkBtF,OAHnC,sBAG2C,GAH3C,UAIjB8G,EAJiB,mCAMF,GANE,KAOjBtD,QAPiB,SASP,EAAK/F,MAAM6D,QAAQxB,QAAQwF,kBAAkBtF,OATtC,0BAUb,GAAGyF,YAVU,UAOTsB,QAPS,iCAcL,EAAKtJ,MAAM6D,QAAQxB,QAAQwF,kBAAkBtF,OAdxC,oBAeX,GAAGyF,YAfQ,MAabuB,UAba,gBAYVlI,SAZU,qBAWfmI,KAXe,yCAqBV,EAAKxJ,MAAM6D,QAAQxB,QAAQwF,kBAAkBtF,OArBnC,uBAqB2C,GArB3C,WAsBjB8G,EAtBiB,oCAwBF,GAxBE,MAyBjBtD,QAzBiB,UA2BP,EAAK/F,MAAM6D,QAAQxB,QAAQwF,kBAAkBtF,OA3BtC,4BA4Bb,GAAGyF,YA5BU,YAyBTsB,QAzBS,wBA8BflC,QA9Be,UA8BG,EAAKpH,MAAM6D,QAAQxB,QAAQwF,kBAAkBtF,OA9BhD,iCA8BP8E,IA9BO,wBA6BfmC,KA7Be,8DAtcF,EA2enB5F,mBA3emB,sBA2eE,4BAAAhC,EAAA,6EAEI,EAAK5B,MAAM6D,QAAQxB,QAAQyB,eAAevB,OAF9C,yBAEjBwB,cAFiB,WACd1C,SADc,gBAIf8C,EAAI,EAJW,OAAAvC,EAAA,KAKT,EAAK5B,MAAM+D,eALF,qDAKdI,EALc,qBAMC,IAAIjC,IAAKC,IAAIhB,SAC7BiD,KAAKC,MAAM,EAAKrE,MAAMsE,uBAAuBC,WAC7C,EAAKvE,MAAM+D,cAAcI,IARV,0EA3eF,EA0fnBsF,sBA1fmB,uCA0fK,WAAOhE,GAAP,QAiBbC,EAjBa,SAAA9D,EAAA,6DAiBb8D,EAjBa,SAiBIC,GACxB,IAAIC,EAAQ,IAAI1D,IAAK2D,aAErBF,EAAMG,KAAI,SAACvD,GACT,OAAO,IAAIwD,SAAQ,SAACC,EAAKC,GACvB,IAAIC,EAAM3D,EAAK4D,QACb,CAAEC,KAAMC,EAAS,GAAIC,IAAK,YAC1B,SAACC,EAAKC,GACAD,EAAKN,EAAIM,GACRP,EAAIQ,MAGbZ,EAAMa,IAAIP,SAGdN,EAAMc,WA/BRjB,EAAMkB,iBADgB,SAICzE,IAAKC,IAAIyE,cAJV,OAIhBP,EAJgB,OAOhBpE,EAAiB,IAAIC,IAAKC,IAAIhB,SAClCiB,IACA,EAAKpC,MAAMwH,WAGb9B,EAAiB,CAEf,EAAK1F,MAAM6D,QAAQxB,QAAQqH,qBAAqB5C,KAChD7E,EAAeI,QAAQqH,qBAAqB5C,OAfxB,2CA1fL,wDAgiBnB6C,sBAhiBmB,uCAgiBK,WAAOlE,GAAP,QAiBbC,EAjBa,SAAA9D,EAAA,6DAiBb8D,EAjBa,SAiBIC,GACxB,IAAIC,EAAQ,IAAI1D,IAAK2D,aAErBF,EAAMG,KAAI,SAACvD,GACT,OAAO,IAAIwD,SAAQ,SAACC,EAAKC,GACvB,IAAIC,EAAM3D,EAAK4D,QACb,CAAEC,KAAMC,EAAS,GAAIC,IAAK,YAC1B,SAACC,EAAKC,GACAD,EAAKN,EAAIM,GACRP,EAAIQ,MAGbZ,EAAMa,IAAIP,SAGdN,EAAMc,WA/BRjB,EAAMkB,iBADgB,SAICzE,IAAKC,IAAIyE,cAJV,OAIhBP,EAJgB,OAOhBpE,EAAiB,IAAIC,IAAKC,IAAIhB,SAClCiB,IACA,EAAKpC,MAAMwH,WAGb9B,EAAiB,CAEf,EAAK1F,MAAM6D,QAAQxB,QAAQuH,kBAAkB9C,KAC7C7E,EAAeI,QAAQuH,kBAAkB9C,OAfrB,2CAhiBL,sDAEjB,EAAK9G,MAAQ,CACX6B,eAAgB,EAAK9B,MAAMyH,UAC3BqC,mBAAoB,GACpB9H,UAAW,EAAKhC,MAAMgC,UACtB8B,QAAS,EAAK9D,MAAM8D,QACpBP,QAAS,EAAKvD,MAAMuD,QACpBgB,uBAAwB,EAAKvE,MAAMuE,uBACnCxB,KAAM,EAAK/C,MAAM+C,KACjB4E,eAAgB,GAChBF,UAAW,EAAKzH,MAAMyH,UACtBN,YAAa,GACbqC,UAAW,GACXxF,cAAe,GACf+F,iBAAkB,IAGpB,EAAKC,kBAAoB,EAAKA,kBAAkBtH,KAAvB,gBACzB,EAAK+C,oBAAsB,EAAKA,oBAAoB/C,KAAzB,gBAC3B,EAAKuH,6BAA+B,EAAKA,6BAA6BvH,KAAlC,gBAGpC,EAAKuE,iBAAmB,EAAKA,iBAAiBvE,KAAtB,gBACxB,EAAK0E,oBAAsB,EAAKA,oBAAoB1E,KAAzB,gBAC3B,EAAKwH,qBAAuB,EAAKA,qBAAqBxH,KAA1B,gBAC5B,EAAK8E,uBAAyB,EAAKA,uBAAuB9E,KAA5B,gBAC9B,EAAKmF,2BAA6B,EAAKA,2BAA2BnF,KAAhC,gBA3BjB,EADrB,mLAmF4B,qBADpB0C,EAAWC,OAAOD,UAlF1B,gCAoFYA,EAASE,SApFrB,OAuFIlF,KAAKyD,qBACLzD,KAAK6G,mBACLI,QAAQC,IAAIlH,MAzFhB,kMA4IqCsF,GA5IrC,gBAmLaC,EAnLb,wEAmLaA,EAnLb,SAmL8BC,GACxB,IAAIC,EAAQ,IAAI1D,IAAK2D,aAErBF,EAAMG,KAAI,SAACvD,GACT,OAAO,IAAIwD,SAAQ,SAACC,EAAKC,GACvB,IAAIC,EAAM3D,EAAK4D,QACb,CAAEC,KAAMC,EAAS,GAAIC,IAAK,YAC1B,SAACC,EAAKC,GACAD,EAAKN,EAAIM,GACRP,EAAIQ,MAGbZ,EAAMa,IAAIP,SAGdN,EAAMc,WArDRjB,EAAMkB,iBA7IV,SAgJ2BzE,IAAKC,IAAIyE,cAhJpC,cAgJUP,EAhJV,OAmJUpE,EAAiB,IAAIC,IAAKC,IAAIhB,SAClCiB,IACAjC,KAAKH,MAAM6B,gBArJjB,SAyJgCI,EAAeI,QAAQwF,kBAAkBtF,OAzJzE,OA6JI,IAJI2H,EAzJR,OA6JalJ,EAAQ,EAAGA,EAAQkJ,EAAgBlG,OAAQhD,IAMb,OAL/BmJ,EAAiBD,EAAgBlJ,IAKtBoJ,iBACfD,EAAeE,gBAAgBC,SAAWnK,KAAKH,MAAM6B,iBAErDgI,EAAqB7I,GAIzB0E,EAAiB,CAIfvF,KAAKH,MAAM6D,QAAQxB,QAAQkI,qBAAqB,EAAGpK,KAAKH,MAAM8C,MAAMgE,KACpE7E,EAAeI,QAAQmI,kCACrBX,GACA/C,OAjLR,sQAsNIM,QAAQC,IAAI,qBAtNhB,KAuNItB,QAAQuD,QAAQnJ,KAAKgH,uBAvNzB,KAwNMhH,KAxNN,SAyN2BA,KAAKH,MAAM6D,QAAQxB,QAAQ4E,aAAa1E,OAzNnE,yBAyNQ2E,YAzNR,gBAwNW7F,SAxNX,qBAuNgDmI,KAvNhD,8JAykBoB/D,GAChBA,EAAMkB,iBADiB,MAInBlB,EADFgF,OAAU3H,EAHW,EAGXA,KAAMtD,EAHK,EAGLA,MAElBW,KAAKkB,SAAL,eAAiByB,EAAOtD,MA9kB5B,+BAulBI,OACE,mCACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAMkL,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAxB,SACE,cAAC,EAAD,CACE7I,UAAW5B,KAAKH,MAAMsD,QACtBA,QAASnD,KAAKH,MAAMsD,QACpBkE,UAAWrH,KAAKH,MAAMwH,UACtB3D,QAAS1D,KAAKH,MAAM6D,QACpBS,uBAAwBnE,KAAKJ,MAAMuE,uBACnC/D,OAAQJ,KAAKJ,MAAM+C,iBAjmBjC,GAA+BnC,cA+4BhB4E","file":"static/js/10.a6aa957c.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\n\nexports.default = _default;","import React, { Component } from \"react\";\nimport { CListGroupItem } from \"@coreui/react\";\n\nexport class Transaction extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  render() {\n    // console.log(this);\n    let typeOfCard, message;\n    if (this.props.to === this.props.myAddress) {\n      typeOfCard = \"success\";\n      message = `${this.props.amount} || From: ${this.props.myName}, To:\n          ${this.props.friendsName}`;\n    } else {\n      typeOfCard = \"danger\";\n      message = `${this.props.amount} || From: ${this.props.friendsName}, To:\n          ${this.props.myName}`;\n    }\n\n    return (\n      <div>\n        <CListGroupItem accent={typeOfCard} color={typeOfCard}>\n          {message}\n        </CListGroupItem>\n      </div>\n    );\n  }\n}\n\nexport default Transaction;\n","import React, { Component } from \"react\";\nimport Transaction from \"./Transaction\";\n\nimport { CCard, CCardBody, CListGroup } from \"@coreui/react\";\n\nexport class TransactionLog extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      allTransactions: props.allTransactions,\n    };\n  }\n\n  render() {\n    // console.log(this);\n    const items = [];\n    for (const [index, value] of Object.entries(this.state.allTransactions)) {\n      // console.log(value);\n      items.push(\n        <Transaction\n          key={index}\n          myName={this.props.myName}\n          myAddress={this.props.myAddress}\n          friendsName={this.props.friendsName}\n          {...value}\n        />\n      );\n    }\n    return (\n      <div>\n        <CCard>\n          <CCardBody className=\"scrollable\">\n            <CListGroup accent>{items}</CListGroup>\n          </CCardBody>\n        </CCard>\n      </div>\n    );\n  }\n}\n\nexport default TransactionLog;\n","import React, { Component } from \"react\";\nimport web3 from \"../../web3.js\";\nimport profileAbi from \"../../profile\";\n\n//CORE-UI\nimport { CButton, CCard, CCardBody, CCardHeader, CLink } from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\n\n//MATERIAL-UI\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport AddIcon from \"@material-ui/icons/Add\";\n\nimport TransactionLog from \"./TransactionLog\";\nimport AddDebt from \"../forms/AddDebt\";\n\nexport class Contract extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      allTransactions: props.allTransactions,\n      myName: props.myName,\n      typeOfCard: props.typeOfCard,\n      creditor: props.creditor,\n      debtor: props.debtor,\n      debt: props.debt,\n      openTransactionLog: false,\n      openAddDebt: false,\n      friendsName: \"\",\n      friendsAddress: \"\",\n    };\n\n    this.handleOpenTransactionLog = this.handleOpenTransactionLog.bind(this);\n    this.handleCloseTransactionLog = this.handleCloseTransactionLog.bind(this);\n    this.handleOpenAddDebt = this.handleOpenAddDebt.bind(this);\n    this.handleCloseAddDebt = this.handleCloseAddDebt.bind(this);\n    this.getNameFromAddress = this.getNameFromAddress.bind(this);\n  }\n\n  componentDidMount() {\n    this.getNameFromAddress();\n    // console.log(this.props.allTransactions);\n  }\n\n  handleOpenTransactionLog = () => {\n    this.setState({\n      openTransactionLog: true,\n    });\n  };\n  handleCloseTransactionLog = () => {\n    this.setState({\n      openTransactionLog: false,\n    });\n  };\n\n  handleOpenAddDebt = () => {\n    this.setState({\n      openAddDebt: true,\n    });\n  };\n  handleCloseAddDebt = () => {\n    this.setState({\n      openAddDebt: false,\n    });\n  };\n\n  getNameFromAddress = async () => {\n    const friendsAddress =\n      this.props.debtor === this.props.playerOne\n        ? this.props.creditor\n        : this.props.debtor;\n    this.setState({ friendsAddress: friendsAddress });\n    let friendsProfile = new web3.eth.Contract(profileAbi, friendsAddress);\n    this.setState({\n      friendsName: await friendsProfile.methods.getName().call(),\n    });\n  };\n\n  render() {\n    // console.log(this);\n    let headerName =\n      this.state.myName === this.state.creditor\n        ? this.props.myName\n        : this.state.friendsName;\n    let message = \"\";\n    let cardTextStyle = \"\";\n    if (this.state.typeOfCard === \"danger\") {\n      cardTextStyle = \"text-center red_text\";\n      message = (\n        <CCardHeader>\n          <b>you owe</b> {headerName}\n        </CCardHeader>\n      );\n    } else {\n      cardTextStyle = \"text-center green_text\";\n      message = (\n        <CCardHeader>\n          {headerName}\n          <br /> <b>owes you</b>\n        </CCardHeader>\n      );\n    }\n\n    return (\n      <div>\n        <CCard className={cardTextStyle}>\n          {message}\n          <CCardBody>\n            <blockquote className=\"card-bodyquote\">\n              <h1>{this.state.debt}</h1>\n            </blockquote>\n            <footer className=\"footer_contract_list_element\">\n              <CButton\n                size=\"sm\"\n                color=\"dark\"\n                className=\"buttons_inside_contract_list\"\n                onClick={this.handleOpenTransactionLog}\n              >\n                <CIcon name=\"cil-scrubber\" /> Transactions\n              </CButton>\n              <Dialog\n                open={this.state.openTransactionLog}\n                onClose={this.handleCloseTransactionLog}\n                aria-labelledby=\"form-dialog-title\"\n              >\n                <DialogTitle id=\"form-dialog-title\" className=\"align_center\">\n                  All transactions\n                  <div className=\"card-header-actions\">\n                    <CLink\n                      className=\"card-header-action\"\n                      onClick={this.handleCloseTransactionLog}\n                    >\n                      <CIcon name=\"cil-x-circle\" />\n                    </CLink>\n                  </div>\n                </DialogTitle>\n                <DialogContent>\n                  <TransactionLog\n                    myName={this.state.myName}\n                    myAddress={this.props.address}\n                    allTransactions={this.state.allTransactions}\n                    friendsName={this.state.friendsName}\n                  />\n                </DialogContent>\n              </Dialog>\n\n              <CButton\n                size=\"sm\"\n                color=\"secondary\"\n                className=\"buttons_inside_contract_list\"\n                onClick={this.handleOpenAddDebt}\n              >\n                {/* <CIcon name=\"cil-note-add\" /> */}\n                <AddIcon fontSize=\"small\"></AddIcon>\n                Add Debt\n              </CButton>\n              <Dialog\n                open={this.state.openAddDebt}\n                onClose={this.handleCloseAddDebt}\n                aria-labelledby=\"form-dialog-title\"\n              >\n                <DialogTitle id=\"form-dialog-title\">Sum you gave</DialogTitle>\n                <DialogContent>\n                  <AddDebt\n                    {...this.props}\n                    friendAddress={this.state.friendsAddress}\n                    handleClose={this.handleCloseAddDebt}\n                  />\n                </DialogContent>\n              </Dialog>\n            </footer>\n          </CCardBody>\n        </CCard>\n      </div>\n    );\n  }\n}\n\nexport default Contract;\n","import React, { Component } from \"react\";\nimport Contract from \"./Contract\";\n\nimport web3 from \"../../web3.js\";\n\nexport class AllContracts extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      contractsList: [],\n      allContracts: [],\n      listInformation: {},\n    };\n    this.onCheckMyContracts = this.onCheckMyContracts.bind(this);\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  // Getting my contracts\n  onCheckMyContracts = async () => {\n    this.setState({\n      contractsList: await this.props.profile.methods.getContracts().call(),\n    });\n    const length = this.state.contractsList.length;\n\n    if (length > 0) {\n      for (var index = 0; index < length; index++) {\n        this.setState({\n          allContracts: [\n            ...this.state.allContracts,\n            await this.props.profile.methods.getContractsByIndex(index).call(),\n          ],\n        });\n      }\n    }\n    var x = 0;\n    for (x in this.state.contractsList) {\n      let tempC = await new web3.eth.Contract(\n        JSON.parse(this.props.compiledBinaryContract.interface),\n        this.state.contractsList[x]\n      );\n      let creditorName = await tempC.methods.getCurrentCreditorAddress().call();\n      let debtorName = await tempC.methods.getCurrentDebtorAddress().call();\n      let debtAmount = await tempC.methods.getCurrentDebtAmount().call();\n      let allTransactions = await tempC.methods.getAllTransations().call();\n      // console.log(allTransactions);\n      let typeOfCard =\n        creditorName === this.props.playerOne ? \"danger\" : \"success\";\n      let binaryContractInstance = {\n        allTransactions: allTransactions,\n        typeOfCard: typeOfCard,\n        creditor: creditorName,\n        debtor: debtorName,\n        debt: debtAmount,\n      };\n      let newListInformation = {\n        ...this.state.listInformation,\n        [x]: binaryContractInstance,\n      };\n      this.setState({\n        listInformation: newListInformation,\n      });\n    }\n  };\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  async componentDidMount() {\n    // console.log(this.state.friendsList);\n    let ethereum = window.ethereum;\n    if (typeof ethereum !== \"undefined\") {\n      await ethereum.enable();\n    }\n    // this.onCheckMyExchanges();\n    this.onCheckMyContracts();\n    // this.onCheckMyFriends();\n  }\n\n  render() {\n    // console.log(this);\n    const items = [];\n    for (const [index, value] of Object.entries(this.state.listInformation)) {\n      items.push(\n        <Contract\n          key={index}\n          myAddress={this.props.playerOne}\n          {...this.props}\n          {...value}\n        />\n      );\n    }\n\n    const isContractListEmpty = this.state.contractsList.length;\n\n    return (\n      <div>\n        {/* {items} */}\n        {isContractListEmpty === 0 ? <h1>no active contracts</h1> : items}\n      </div>\n    );\n  }\n}\n\nexport default AllContracts;\n","import React, { Component } from \"react\";\n// import fireApp from \"firebase/app\";\n\nimport AddDebt from \"../forms/AddDebt\";\nimport AddFriend from \"../forms/AddFriend\";\nimport AllContracts from \"./AllContracts\";\n// TEST RELATED\nimport web3 from \"../../web3.js\";\nimport profileAbi from \"../../profile\";\n\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CRow,\n  CForm,\n  CFormGroup,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CInputGroupAppend,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport Exchanges from \"../requests/Exchanges\";\n\n// // FIREBASE RELATED\n// require(\"firebase/database\");\n// const { firebaseConfig } = require(\"../../firebaseConfig\");\n// fireApp.initializeApp(firebaseConfig);\n// var database = fireApp.database();\n\n//...................................................................................................................\n\n// **************************** */\n\n// const WidgetsDropdown = lazy(() => import(\"../widgets/WidgetsDropdown.js\"));\n// const WidgetsBrand = lazy(() => import(\"../widgets/WidgetsBrand.js\"));\n\nexport class Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      friendsAddress: this.props.playerTwo,\n      friendRequestIndex: \"\",\n      playerOne: this.props.playerOne,\n      profile: this.props.profile,\n      address: this.props.address,\n      compiledBinaryContract: this.props.compiledBinaryContract,\n      name: this.props.name,\n      providedAmount: \"\",\n      playerTwo: this.props.playerTwo,\n      friendsList: [],\n      exchanges: {},\n      contractsList: [],\n      contractAndProps: {},\n    };\n\n    this.onChangeFormInput = this.onChangeFormInput.bind(this);\n    this.addFriendFormSubmit = this.addFriendFormSubmit.bind(this);\n    this.onSubmitConfirmFriendRequest = this.onSubmitConfirmFriendRequest.bind(\n      this\n    );\n    this.onCheckMyFriends = this.onCheckMyFriends.bind(this);\n    this.onRemoveFriendsList = this.onRemoveFriendsList.bind(this);\n    this.updateRemovedFriends = this.updateRemovedFriends.bind(this);\n    this.onSubmitAddDebtRequest = this.onSubmitAddDebtRequest.bind(this);\n    this.onSubmitConfirmDebtRequest = this.onSubmitConfirmDebtRequest.bind(\n      this\n    );\n    // this.writeUserData = this.writeUserData.bind(this);\n    // this.readUserData = this.readUserData.bind(this);\n    // this.getAddressFromPhoneNumber = this.getAddressFromPhoneNumber.bind(this);\n  }\n\n  // //FIREBASE FUNCTIONS\n  // writeUserData(phoneNumber, name, address) {\n  //   database\n  //     .ref(\"users/\" + phoneNumber)\n  //     .set({\n  //       username: name,\n  //       contractAddress: address,\n  //     })\n  //     .then(() => database.goOffline());\n  // }\n\n  // readUserData = async (phoneNumber) => {\n  //   var address;\n  //   await database\n  //     .ref()\n  //     .child(\"users\")\n  //     .child(phoneNumber)\n  //     .get()\n  //     .then(function (snapshot) {\n  //       if (snapshot.exists()) {\n  //         address = snapshot.val();\n  //       } else {\n  //         address = -1;\n  //       }\n  //     })\n  //     .catch(function (error) {\n  //       address = -1;\n  //     })\n  //     .then(() => database.goOffline());\n  //   console.log(address);\n  //   return address;\n  // };\n\n  // getAddressFromPhoneNumber = async (phoneNumber) => {\n  //   var address = await this.readUserData(phoneNumber);\n  //   console.log(address);\n  //   if (address === -1) {\n  //     console.log(\"The address was not found!\");\n  //   }\n  //   // assert.notStrictEqual(-1, address, \"The address was not found!\");\n  //   console.log(address.contractAddress);\n  //   return address.contractAddress;\n  // };\n\n  async componentDidMount() {\n    // console.log(this.state.friendsList);\n    let ethereum = window.ethereum;\n    if (typeof ethereum !== \"undefined\") {\n      await ethereum.enable();\n    }\n    // this.onCheckMyExchanges();\n    this.onCheckMyContracts();\n    this.onCheckMyFriends();\n    console.log(this);\n  }\n\n  // *****************************************************\n  //                  ADD FRIEND\n  // *****************************************************\n  addFriendFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n    // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us friendsProfile address\n    const friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.friendsAddress\n    );\n\n    // NOTE: that's how I convert between a batch request and 2 seperate \"send\" requests:\n\n    makeBatchRequest([\n      // add both of the exchanges in a batch request.\n      this.state.profile.methods.addFriendRequest(\n        this.state.friendsAddress,\n        this.state.name\n      ).send,\n      friendsProfile.methods.addFriendRequestNotRestricted(\n        this.state.address,\n        this.state.name\n      ).send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"1000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  };\n\n  // *****************************************************\n  //                  CONFIRM FRIEND\n  // *****************************************************\n  async onSubmitConfirmFriendRequest(event) {\n    event.preventDefault();\n\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n\n    // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us friendsProfile address\n    const friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.friendsAddress\n    );\n\n    //Finding friend's exchange index:\n    let friendExchanges = await friendsProfile.methods.getAllExchanges().call();\n\n    let friendRequestIndex;\n\n    for (let index = 0; index < friendExchanges.length; index++) {\n      const friendExchange = friendExchanges[index];\n\n      //\"0\" represents addFriendRequest Enum\n      if (\n        // if it is a friendRequest and the source is my friend\n        friendExchange.exchangePurpose === \"0\" &&\n        friendExchange.exchangeDetails.source === this.state.friendsAddress\n      ) {\n        friendRequestIndex = index;\n      }\n    }\n\n    makeBatchRequest([\n      // add both of the exchanges in a batch request.\n\n      // In our frontend the user will choose the correct request, here I test it with 0 as there is only one request\n      this.state.profile.methods.confirmFriendRequest(0, this.state.name).send,\n      friendsProfile.methods.confirmFriendRequestNotRestricted(\n        friendRequestIndex\n      ).send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"1000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  }\n  // *****************************************************\n  //                  GET FRIENDS\n  // *****************************************************\n\n  onCheckMyFriends = async () => {\n    // console.log(\"your friends are:\");\n    // console.log(await profile.methods.getFriends().call());\n    this.setState({\n      friendsList: await this.state.profile.methods.getFriends().call(),\n    });\n    // console.log(this.state);\n  };\n\n  // *****************************************************\n  //                  REMOVE FRIENDS\n  // *****************************************************\n  async updateRemovedFriends() {\n    console.log(\"in remove friends\");\n    Promise.resolve(this.onRemoveFriendsList()).then(\n      this.setState({\n        friendsList: await this.state.profile.methods.getFriends().call(),\n      })\n      // this.setState({\n      //   ...this.state,\n      //   friendsList: {\n      //     ...this.state.friendsList,\n      //     [address]: await profile.methods.getFriends().call(),\n      //   },\n      // })\n    );\n  }\n  onRemoveFriendsList = async () => {\n    // event.preventDefault();\n    // console.log(\"in onRemoveFriendsList\");\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n\n    // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us friend's profile address\n    const friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.friendsAddress\n    );\n\n    makeBatchRequest([\n      // remove both of the exchanges in a batch request.\n      this.state.profile.methods.removeAllFriends().send,\n      friendsProfile.methods.removeAllFriends().send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n\n      console.log(\"in remove friends make batch \" + accounts[0]);\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"1000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  };\n\n  // *****************************************************\n  //               BINARY_CONTRACT PART\n  // *****************************************************\n\n  // Add a debt request for both our exchanges and target exchanges\n  onSubmitAddDebtRequest = async (event) => {\n    event.preventDefault();\n\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n\n    // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us friendsProfile address\n    const friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.playerTwo\n    );\n\n    makeBatchRequest([\n      // add both of the exchanges in a batch request.\n      // the difference: addDebtRequest(destination, same other args), addDebtRequestNotRestricted(source, same other args)\n      this.state.profile.methods.addDebtRequest(\n        this.state.playerTwo,\n        this.state.playerOne,\n        this.state.providedAmount,\n        this.state.playerTwo\n      ).send,\n      friendsProfile.methods.addDebtRequestNotRestricted(\n        this.state.playerOne,\n        this.state.playerOne,\n        this.state.providedAmount,\n        this.state.playerTwo\n      ).send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n\n      // let promises = calls.map(call => {\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"1000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  // Confirm a debt request for both our exchanges and target exchanges\n  onSubmitConfirmDebtRequest = async (event) => {\n    event.preventDefault();\n\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n\n    // Setting this.state.{playerOne, Two, amount} from the request details:\n    let myExchanges = await this.state.profile.methods.getAllExchanges().call();\n    let choosenRequest = myExchanges[0]; // TODO: I use myExchanges[0] for testing only! The user will pick the correct one\n\n    this.setState({ playerTwo: choosenRequest.transaction.from });\n    this.setState({ playerOne: choosenRequest.transaction.to });\n    this.setState({ providedAmount: choosenRequest.transaction.amount });\n\n    let myContracts = await this.state.profile.methods.getContracts().call();\n\n    let existedContractAddress; // if a contract will be deployed, we will use this variable. Otherwise, we will use deployedContractAddress\n    let deployedContractAddress;\n    let contractExisted = false;\n\n    for (var i = 0; i < myContracts.length; i++) {\n      // in this for loop we try to find if a contract exist, or we should create one\n      let currentBinaryContract = await new web3.eth.Contract(\n        JSON.parse(this.state.compiledBinaryContract.interface),\n        (existedContractAddress = myContracts[i])\n      );\n\n      let currentDebtOfCurrentBinaryContract = await currentBinaryContract.methods\n        .getCurrentDebt()\n        .call();\n      let accountsOfTransaction = [this.state.playerOne, this.state.playerTwo];\n\n      if (\n        accountsOfTransaction.includes(\n          String(currentDebtOfCurrentBinaryContract.debtor)\n        ) &&\n        accountsOfTransaction.includes(\n          String(currentDebtOfCurrentBinaryContract.creditor)\n        )\n      ) {\n        // it means that the contract already exist\n\n        await currentBinaryContract.methods\n          .addTransaction(\n            this.state.playerOne,\n            this.state.providedAmount,\n            this.state.playerTwo\n          )\n          .send({\n            from: accounts[0],\n            gas: \"2000000\",\n          });\n\n        contractExisted = true;\n\n        break;\n      }\n    } // end of for loop - now we know if the contract existed or not\n\n    if (!contractExisted) {\n      // deploy a binaryContract\n      await this.state.profile.methods\n        .createBinaryContract(\n          this.state.playerOne,\n          this.state.providedAmount,\n          this.state.playerTwo\n        )\n        .send({\n          from: accounts[0],\n          gas: \"4000000\",\n        });\n\n      console.log(\"Binary contract was created successfully!\");\n\n      deployedContractAddress = await this.state.profile.methods\n        .getLastContract()\n        .call();\n    }\n\n    let currentBinaryContractAddress = contractExisted\n      ? existedContractAddress\n      : deployedContractAddress;\n    let currentBinaryContract = await new web3.eth.Contract(\n      JSON.parse(this.state.compiledBinaryContract.interface),\n      currentBinaryContractAddress\n    );\n\n    let friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.playerTwo\n    );\n\n    // we assign a zeroAddress if the contract already existed. Otherwise, the deployed contract address\n    let newContractAddress = contractExisted\n      ? await this.state.profile.methods.getZeroAddress().call()\n      : deployedContractAddress;\n\n    makeBatchRequest([\n      // remove both of the exchanges in a batch request.\n\n      // We call this method in order to remove our exchange on the profile (solidity)\n      // TODO: when implementing it with the actual frontend, we should send the actual index instead of \"0\"\n      this.state.profile.methods.confirmDebtRequest(0).send,\n\n      // We call this method in order to remove friend's exchange (solidity method)\n      // TODO: when implementing it with the actual frontend, we should send the actual index instead of \"0\"\n      friendsProfile.methods.confirmDebtRequestNotRestricted(\n        0,\n        newContractAddress\n      ).send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n\n      // let promises = calls.map(call => {\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"2000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  // Getting my exchanges\n  onCheckMyExchanges = async () => {\n    // console.log(\"your exchanges are:\");\n    if (\n      (await this.state.profile.methods.getAllExchanges().call())[0] !==\n      undefined\n    ) {\n      var exchange = {};\n      Promise.resolve(\n        (exchange = (\n          await this.state.profile.methods.getAllExchanges().call()\n        )[0].transaction)\n      ).then(\n        this.setState({\n          exchanges: (\n            await this.state.profile.methods.getAllExchanges().call()\n          )[0].transaction,\n        })\n      );\n    }\n\n    if (\n      (await this.state.profile.methods.getAllExchanges().call())[0] !==\n      undefined\n    ) {\n      var exchange = {};\n      Promise.resolve(\n        (exchange = (\n          await this.state.profile.methods.getAllExchanges().call()\n        )[0].transaction)\n      ).then(\n        console.log(await this.state.profile.methods.getAllExchanges().call())\n      );\n    }\n  };\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  // Getting my contracts\n  onCheckMyContracts = async () => {\n    this.setState({\n      contractsList: await this.state.profile.methods.getContracts().call(),\n    });\n    var x = 0;\n    for (x in this.state.contractsList) {\n      let tempC = await new web3.eth.Contract(\n        JSON.parse(this.state.compiledBinaryContract.interface),\n        this.state.contractsList[x]\n      );\n    }\n  };\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  // Remove Exchanges list for both our exchanges and friend exchanges\n  onRemoveExchangesList = async (event) => {\n    event.preventDefault();\n\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n\n    // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us playerTwo's address\n    const friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.playerTwo\n    );\n\n    makeBatchRequest([\n      // remove both of the exchanges in a batch request.\n      this.state.profile.methods.removeAllExchanges().send,\n      friendsProfile.methods.removeAllExchanges().send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"2000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////////////////////////\n  // Remove Contracts list for both our contracts and friend contracts\n  onRemoveContractsList = async (event) => {\n    event.preventDefault();\n\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n\n    // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us playerTwo's address\n    const friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.playerTwo\n    );\n\n    makeBatchRequest([\n      // remove both of the exchanges in a batch request.\n      this.state.profile.methods.removeContracts().send,\n      friendsProfile.methods.removeContracts().send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"2000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  };\n\n  // *****************************************************\n  //                  FORM CHANGE HANDLERS\n  // *****************************************************\n\n  onChangeFormInput(event) {\n    event.preventDefault();\n    const {\n      target: { name, value },\n    } = event;\n    this.setState({ [name]: value });\n  }\n\n  // *****************************************************\n  //                       RENDER\n  // *****************************************************\n\n  render() {\n    // console.log(this);\n    return (\n      <>\n        <CRow>\n          <CCol xs=\"12\" md=\"8\" xl=\"8\">\n            <AllContracts\n              playerOne={this.state.address}\n              address={this.state.address}\n              playerTwo={this.state.playerTwo}\n              profile={this.state.profile}\n              compiledBinaryContract={this.props.compiledBinaryContract}\n              myName={this.props.name}\n            />\n          </CCol>\n        </CRow>\n        {/* <CRow>\n          <CCol xs=\"4\" md=\"8\" xl=\"8\">\n            <button\n              onClick={() => {\n                this.writeUserData(\"0547307181\", \"dror\", this.props.playerOne);\n              }}\n            >\n              add name\n            </button>\n          </CCol>\n          <CCol xs=\"4\" md=\"8\" xl=\"8\">\n            <button\n              onClick={() => {\n                this.readUserData(\"0547307181\");\n              }}\n            >\n              find user\n            </button>\n          </CCol>\n          <CCol xs=\"4\" md=\"8\" xl=\"8\">\n            <button\n              onClick={() => {\n                this.getAddressFromPhoneNumber(\"0547307181\");\n              }}\n            >\n              get address\n            </button>\n          </CCol>\n        </CRow> */}\n        {/* <CRow>\n          <CCol xs=\"12\" md=\"4\">\n            <AddFriend\n              playerOne={this.state.address}\n              address={this.state.address}\n              playerTwo={this.state.playerTwo}\n              profile={this.state.profile}\n            />\n          </CCol>\n          <CCol xs=\"12\" md=\"4\">\n            <CCard>\n              <CForm\n                action=\"\"\n                method=\"post\"\n                className=\"form-horizontal\"\n                onSubmit={this.onSubmitConfirmFriendRequest}\n              >\n                <CCardHeader>Confirm Friend</CCardHeader>\n                <CCardBody>\n                  <CFormGroup row>\n                    <CCol md=\"12\">\n                      <CInputGroup>\n                        <CInputGroupPrepend>\n                          <CInputGroupText>\n                            <CIcon name=\"cil-user\" />\n                          </CInputGroupText>\n                        </CInputGroupPrepend>\n                        <CInput\n                          id=\"input2-group2\"\n                          name=\"input2-group2\"\n                          placeholder=\"Confirmation\"\n                          value={this.state.friendsAddress}\n                          onChange={this.onChangeFormInput}\n                        />\n                      </CInputGroup>\n                    </CCol>\n                  </CFormGroup>\n                </CCardBody>\n                <CCardFooter>\n                  <CButton type=\"submit\" size=\"sm\" color=\"success\">\n                    <CIcon name=\"cil-scrubber\" /> Submit\n                  </CButton>\n                  <CButton type=\"reset\" size=\"sm\" color=\"danger\">\n                    <CIcon name=\"cil-ban\" /> Reset\n                  </CButton>\n                </CCardFooter>\n              </CForm>\n            </CCard>\n          </CCol>\n        </CRow> */}\n        {/* <CRow>\n          <CCol xs=\"12\" md=\"6\" xl=\"6\">\n            <CCard>\n              <CCardHeader>Friends List</CCardHeader>\n              <CCardBody>\n                <div className=\"table-responsive\">\n                  <table className=\"table table-hover table-outline mb-0 \">\n                    <thead className=\"thead-light\">\n                      <tr>\n                        <th>Friends Address</th>\n                        <th>Friends Name</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                    </tbody>\n                  </table>\n                </div>\n              </CCardBody>\n              <CCardFooter>\n                <CButton\n                  type=\"button\"\n                  size=\"sm\"\n                  color=\"success\"\n                  onClick={this.onCheckMyFriends}\n                >\n                  <CIcon name=\"cil-user\" /> Check Friends\n                </CButton>\n                <CButton\n                  type=\"button\"\n                  size=\"sm\"\n                  color=\"danger\"\n                  onClick={this.updateRemovedFriends}\n                >\n                  <CIcon name=\"cil-user-unfollow\" /> Remove Friends\n                </CButton>\n              </CCardFooter>\n            </CCard>\n          </CCol>\n        </CRow> */}\n        {/* <CRow>\n          <CCol xs=\"12\" sm=\"4\">\n            <AddDebt\n              playerOne={this.state.playerOne}\n              playerTwo={this.state.playerTwo}\n              profile={this.state.profile}\n            />\n          </CCol>\n          <CCol xs=\"12\" sm=\"4\">\n            <CCard>\n              <CCardHeader>Confirm Debt Request</CCardHeader>\n              <CCardBody>\n                <CForm\n                  action=\"\"\n                  method=\"post\"\n                  onSubmit={this.onSubmitConfirmDebtRequest}\n                >\n                  <CFormGroup>\n                    <CInputGroup>\n                      <CInput\n                        id=\"fromConfirm\"\n                        name=\"friendsAddress\"\n                        placeholder=\"from\"\n                        autoComplete=\"From\"\n                        value={this.state.friendsAddress}\n                        onChange={this.onChangeFormInput}\n                      />\n                      <CInputGroupAppend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-user\" />\n                        </CInputGroupText>\n                      </CInputGroupAppend>\n                    </CInputGroup>\n                  </CFormGroup>\n                  <CFormGroup>\n                    <CInputGroup>\n                      <CInput\n                        id=\"toConfirm\"\n                        name=\"playerOne\"\n                        placeholder=\"To\"\n                        autoComplete=\"to\"\n                        value={this.state.playerOne}\n                        onChange={this.onChangeFormInput}\n                      />\n                      <CInputGroupAppend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-user\" />\n                        </CInputGroupText>\n                      </CInputGroupAppend>\n                    </CInputGroup>\n                  </CFormGroup>\n                  <CFormGroup>\n                    <CInputGroup>\n                      <CInput\n                        id=\"amount\"\n                        name=\"providedAmount\"\n                        placeholder=\"Amount\"\n                        autoComplete=\"amount\"\n                        onChange={this.onChangeFormInput}\n                      />\n                      <CInputGroupAppend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-dollar\" />\n                        </CInputGroupText>\n                      </CInputGroupAppend>\n                    </CInputGroup>\n                  </CFormGroup>\n                  <CFormGroup className=\"form-actions\">\n                    <CButton type=\"submit\" size=\"sm\" color=\"secondary\">\n                      Confirm a Debt Request\n                    </CButton>\n                  </CFormGroup>\n                </CForm>\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow> */}\n        {/* <CRow>\n          <CCol xs=\"12\" md=\"4\" xl=\"4\">\n            <CCard>\n              <CCardHeader>Contracts</CCardHeader>\n              <CCardBody>\n                <div className=\"table-responsive\">\n                  <table className=\"table table-hover table-outline mb-0 \">\n                    <thead className=\"thead-light\">\n                      <tr>\n                        <th>Contract address</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {this.state.contractsList.map((contract) => (\n                        <tr key={contract}>\n                          <td>\n                            <div>{contract}</div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CCardBody>\n              <CCardFooter>\n                <CButton\n                  type=\"button\"\n                  size=\"sm\"\n                  color=\"success\"\n                  onClick={this.onCheckMyContracts}\n                >\n                  <CIcon name=\"cil-user\" /> Check Contracts\n                </CButton>\n                <CButton\n                  type=\"button\"\n                  size=\"sm\"\n                  color=\"danger\"\n                  onClick={this.onRemoveContractsList}\n                >\n                  <CIcon name=\"cil-user-unfollow\" /> Remove Contracts\n                </CButton>\n              </CCardFooter>\n            </CCard>\n          </CCol>\n          <CCol xs=\"12\" md=\"8\" xl=\"8\">\n            <CCard>\n              <CCardHeader>Exchanges</CCardHeader>\n              <CCardBody>\n                <div className=\"table-responsive\">\n                  <table className=\"table table-hover table-outline mb-0 \">\n                    <thead className=\"thead-light\">\n                      <tr>\n                        <th>from Address</th>\n                        <th>to Address</th>\n                        <th>amount</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {this.state.exchanges === undefined ? (\n                        <p>loading..</p>\n                      ) : (\n                        <tr key={this.state.exchanges.date}>\n                          <td>\n                            <div>{this.state.exchanges.from}</div>\n                          </td>\n                          <td>\n                            <div>{this.state.exchanges.to}</div>\n                          </td>\n                          <td>\n                            <div>{this.state.exchanges.amount}</div>\n                          </td>\n                        </tr>\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </CCardBody>\n              <CCardFooter>\n                <CButton\n                  type=\"button\"\n                  size=\"sm\"\n                  color=\"success\"\n                  onClick={this.onCheckMyExchanges}\n                >\n                  <CIcon name=\"cil-user\" /> Check Exchanges\n                </CButton>\n                <CButton\n                  type=\"button\"\n                  size=\"sm\"\n                  color=\"danger\"\n                  onClick={this.onRemoveExchangesList}\n                >\n                  <CIcon name=\"cil-user-unfollow\" /> Remove Exchanges\n                </CButton>\n              </CCardFooter>\n            </CCard>\n          </CCol>\n        </CRow> */}\n      </>\n    );\n  }\n}\n\nexport default Dashboard;\n"],"sourceRoot":""}