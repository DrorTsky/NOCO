{"version":3,"sources":["views/forms/AmountToRotateRotationDialog.js","views/forms/ChooseFriendsForRotationRequest.js","views/forms/Rotation.js"],"names":["debtRotationStatus","AmountToRotateRotationDialog","props","submitRotation","event","preventDefault","generateDebtRotation","handleClose","a","web3","eth","getAccounts","accounts","creditorProfile","Contract","profileAbi","selectedCreditor","friendsAddress","debtorProfile","selectedDebtor","profile","methods","addDebtRotationRequestNotRestricted","mediatorAddress","state","amountToRotate","send","from","gas","setStateAndAmountOfExchanges","maxAmountToRotate","onChangeFormInput","bind","parseInt","this","debt","setState","target","name","value","Number","style","textAlign","action","method","onSubmit","id","placeholder","autoComplete","onChange","required","maxWidth","paddingRight","paddingLeft","fontSize","type","size","color","className","disabled","Component","ChooseFriendsForRotationRequest","onCheckMyContracts","getContracts","call","contractsList","length","index","allContracts","getContractsByIndex","x","JSON","parse","compiledBinaryContract","interface","tempC","getCurrentCreditorAddress","creditorAddress","getCurrentDebtorAddress","debtorAddress","getCurrentDebtAmount","debtAmount","isInDebt","playerOne","getNameFromAddress","binaryContractInstance","newListInformation","peopleUserOwesTo","peopleOweToUser","friendsProfile","getName","debtorSelected","ev","prevState","isDebtorSelected","creditorSelected","isCreditorSelected","handleOpenRotationSelectAmount","openRotationSelectAmount","handleCloseRotationSelectAmount","listInformation","ethereum","window","enable","console","log","Object","entries","push","accent","borderTopWidth","onClick","fontWeight","xs","xl","Dialog","open","onClose","aria-labelledby","DialogContent","address","Rotation"],"mappings":"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","file":"static/js/12.765e6bd5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport web3 from \"../../web3.js\";\nimport profileAbi from \"../../profile\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CButton,\n  CForm,\n  CFormGroup,\n  CInput,\n  CFormText,\n  CRow,\n} from \"@coreui/react\";\n\n// var debtRequestType = {\n//   debtRequest: \"0\",\n//   debtRotationRequest: \"1\",\n// };\n\nvar debtRotationStatus = {\n  MediatorAgreed: \"0\",\n  ReceiverAgreed: \"1\",\n  SenderAgreed: \"2\",\n  Done: \"3\",\n};\n\nexport class AmountToRotateRotationDialog extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { amountToRotate: 0, maxAmountToRotate: 0 };\n    this.onChangeFormInput = this.onChangeFormInput.bind(this);\n    this.submitRotation = this.submitRotation.bind(this);\n    this.generateDebtRotation = this.generateDebtRotation.bind(this);\n    // this.findDebtIndex = this.findDebtIndex.bind(this);\n  }\n\n  submitRotation = (event) => {\n    event.preventDefault();\n    // console.log(this);\n    this.generateDebtRotation();\n    this.props.handleClose();\n  };\n\n  componentDidMount() {\n    const maxAmountToRotate =\n      parseInt(this.props.selectedCreditor.debt) >\n      parseInt(this.props.selectedDebtor.debt)\n        ? parseInt(this.props.selectedDebtor.debt)\n        : parseInt(this.props.selectedCreditor.debt);\n\n    this.setState({ maxAmountToRotate: maxAmountToRotate });\n  }\n\n  generateDebtRotation = async () => {\n    let accounts = await web3.eth.getAccounts();\n    const creditorProfile = new web3.eth.Contract(\n      profileAbi,\n      this.props.selectedCreditor.friendsAddress\n    );\n    const debtorProfile = new web3.eth.Contract(\n      profileAbi,\n      this.props.selectedDebtor.friendsAddress\n    );\n    // let allExchanges = await this.props.profile.methods\n    //   .getAllExchanges()\n    //   .call();\n    // console.log(allExchanges);\n    // let lastDebtRotationRequestIndex = this.findDebtIndex(\n    //   allExchanges,\n    //   this.props.selectedCreditor,\n    //   this.props.mediatorAddress,\n    //   this.props.selectedDebtor,\n    //   debtRequestType.debtRotationRequest\n    // );\n    // console.log(lastDebtRotationRequestIndex);\n    // console.log(\n    //   `${this.props.mediatorAddress} , ${this.props.selectedCreditor.friendsAddress}, ${this.props.selectedDebtor.friendsAddress}, ${this.state.amountToRotate}`\n    // );\n\n    await this.props.profile.methods\n      .addDebtRotationRequestNotRestricted(\n        this.props.mediatorAddress,\n        this.props.selectedCreditor.friendsAddress,\n        this.props.selectedDebtor.friendsAddress,\n        this.state.amountToRotate,\n        debtRotationStatus.MediatorAgreed,\n        0\n      )\n      .send({ from: accounts[0], gas: \"1000000\" });\n    await debtorProfile.methods\n      .addDebtRotationRequestNotRestricted(\n        this.props.mediatorAddress,\n        this.props.selectedCreditor.friendsAddress,\n        this.props.selectedDebtor.friendsAddress,\n        this.state.amountToRotate,\n        debtRotationStatus.MediatorAgreed,\n        0\n      )\n      .send({ from: accounts[0], gas: \"1000000\" });\n    await creditorProfile.methods\n      .addDebtRotationRequestNotRestricted(\n        this.props.mediatorAddress,\n        this.props.selectedCreditor.friendsAddress,\n        this.props.selectedDebtor.friendsAddress,\n        this.state.amountToRotate,\n        debtRotationStatus.MediatorAgreed,\n        0\n      )\n      .send({ from: accounts[0], gas: \"1000000\" });\n    await this.props.setStateAndAmountOfExchanges();\n  };\n\n  // *****************************************************\n  //                  FORM CHANGE HANDLERS\n  // *****************************************************\n  onChangeFormInput(event) {\n    event.preventDefault();\n    const {\n      target: { name, value },\n    } = event;\n    if (!Number(value)) {\n      return;\n    } else {\n      parseInt(value) > this.state.maxAmountToRotate\n        ? this.setState({ [name]: this.state.maxAmountToRotate })\n        : this.setState({ [name]: value });\n    }\n    // this.setState({ [name]: value });\n  }\n\n  render() {\n    // console.log(this);\n    return (\n      <div>\n        <CCard>\n          <CCardHeader style={{ textAlign: \"center\" }}>\n            How Much to Rotate?\n          </CCardHeader>\n          <CCardBody>\n            <CForm action=\"\" method=\"post\" onSubmit={this.submitRotation}>\n              <CFormGroup>\n                <CRow>\n                  <CInput\n                    id=\"amountDebt\"\n                    name=\"amountToRotate\"\n                    placeholder=\"Amount\"\n                    autoComplete=\"off\"\n                    onChange={this.onChangeFormInput}\n                    required\n                    style={{\n                      textAlign: \"center\",\n                      maxWidth: \"70%\",\n                      paddingRight: \"10%\",\n                    }}\n                  />\n                  <CFormText style={{ paddingLeft: \"5%\", fontSize: \"130%\" }}>\n                    / {this.state.maxAmountToRotate}\n                  </CFormText>\n                </CRow>\n                {this.state.amountToRotate !== 0 ? (\n                  <CRow>\n                    <CFormText>\n                      transferring: {this.state.amountToRotate}\n                    </CFormText>\n                  </CRow>\n                ) : (\n                  \"\"\n                )}\n              </CFormGroup>\n              <CFormGroup style={{ textAlign: \"center\" }}>\n                <CButton\n                  type=\"submit\"\n                  size=\"sm\"\n                  color=\"secondary\"\n                  className=\"confirm_button\"\n                  disabled={this.state.amountToRotate > 0 ? false : true}\n                >\n                  Confirm\n                </CButton>\n              </CFormGroup>\n            </CForm>\n          </CCardBody>\n        </CCard>\n      </div>\n    );\n  }\n}\n\nexport default AmountToRotateRotationDialog;\n","import React, { Component } from \"react\";\nimport web3 from \"../../web3.js\";\nimport profileAbi from \"../../profile\";\n//CORE-UI\nimport {\n  CCol,\n  CRow,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CListGroup,\n  CListGroupItem,\n  CCardFooter,\n  CButton,\n} from \"@coreui/react\";\n\n//MATERIAL-UI\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport AmountToRotateRotationDialog from \"./AmountToRotateRotationDialog.js\";\n\n// since in order to have contract you need you have the other participant\n// as a friend first, plus you cannot rotate \"0\" debt, I'm creating the list from\n// the active contracts\n\nexport class ChooseFriendsForRotationRequest extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      contractsList: [],\n      allContracts: [],\n      listInformation: {},\n      peopleUserOwesTo: {},\n      peopleOweToUser: {},\n      selectedDebtor: \"\",\n      selectedCreditor: \"\",\n      isDebtorSelected: false,\n      isCreditorSelected: false,\n      openRotationSelectAmount: false,\n      amountToRotate: 0,\n    };\n    // this.onCheckMyContracts = this.onCheckMyContracts.bind(this);\n    this.debtorSelected = this.debtorSelected.bind(this);\n    this.creditorSelected = this.creditorSelected.bind(this);\n    this.handleOpenRotationSelectAmount = this.handleOpenRotationSelectAmount.bind(\n      this\n    );\n    this.handleCloseRotationSelectAmount = this.handleCloseRotationSelectAmount.bind(\n      this\n    );\n    // this.onCheckMyContracts = this.onCheckMyContracts.bind(this);\n    this.getNameFromAddress = this.getNameFromAddress.bind(this);\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////\n  // Getting my contracts\n  onCheckMyContracts = async () => {\n    this.setState({\n      contractsList: await this.props.profile.methods.getContracts().call(),\n    });\n    const length = this.state.contractsList.length;\n\n    if (length > 0) {\n      for (var index = 0; index < length; index++) {\n        this.setState({\n          allContracts: [\n            ...this.state.allContracts,\n            await this.props.profile.methods.getContractsByIndex(index).call(),\n          ],\n        });\n      }\n    }\n    var x = 0;\n    for (x in this.state.contractsList) {\n      let tempC = await new web3.eth.Contract(\n        JSON.parse(this.props.compiledBinaryContract.interface),\n        this.state.contractsList[x]\n      );\n\n      // get necessary information from the Contract\n      let creditorAddress = await tempC.methods\n        .getCurrentCreditorAddress()\n        .call();\n      let debtorAddress = await tempC.methods.getCurrentDebtorAddress().call();\n      let debtAmount = await tempC.methods.getCurrentDebtAmount().call();\n\n      // asses who owes who for future filtering\n      let friendsAddress;\n      let friendsName;\n      let isInDebt;\n      if (creditorAddress !== this.props.playerOne) {\n        friendsAddress = creditorAddress;\n        isInDebt = \"success\";\n        //TODO get friends name from server\n      } else {\n        friendsAddress = debtorAddress;\n        isInDebt = \"danger\";\n        //TODO get friends name from server\n      }\n\n      // create list of contract information\n      let name = await this.getNameFromAddress(friendsAddress);\n      let binaryContractInstance = {\n        friendsAddress: friendsAddress,\n        debt: debtAmount,\n        isInDebt: isInDebt,\n        name: name,\n      };\n      if (binaryContractInstance.isInDebt === \"danger\") {\n        let newListInformation = {\n          ...this.state.peopleUserOwesTo,\n          [x]: binaryContractInstance,\n        };\n\n        this.setState({\n          peopleUserOwesTo: newListInformation,\n        });\n      } else {\n        let newListInformation = {\n          ...this.state.peopleOweToUser,\n          [x]: binaryContractInstance,\n        };\n\n        this.setState({\n          peopleOweToUser: newListInformation,\n        });\n      }\n    }\n  };\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  getNameFromAddress = async (friendsAddress) => {\n    let friendsProfile = new web3.eth.Contract(profileAbi, friendsAddress);\n    return await friendsProfile.methods.getName().call();\n  };\n\n  async componentDidMount() {\n    // console.log(this.state.friendsList);\n    let ethereum = window.ethereum;\n    if (typeof ethereum !== \"undefined\") {\n      await ethereum.enable();\n    }\n    this.onCheckMyContracts();\n  }\n\n  debtorSelected = (selectedDebtor) => (ev) => {\n    this.setState({ selectedDebtor });\n    this.setState((prevState) => {\n      return { isDebtorSelected: true };\n    });\n  };\n  creditorSelected = (selectedCreditor) => (ev) => {\n    this.setState({ selectedCreditor });\n    this.setState((prevState) => {\n      return { isCreditorSelected: true };\n    });\n  };\n\n  handleOpenRotationSelectAmount = () => {\n    this.setState({ openRotationSelectAmount: true });\n  };\n  handleCloseRotationSelectAmount = () => {\n    this.setState({ openRotationSelectAmount: false });\n  };\n\n  render() {\n    console.log(this);\n\n    const peopleOweToUser = [];\n    const peopleUserOwesTo = [];\n\n    for (const [index, value] of Object.entries(this.state.peopleOweToUser)) {\n      // console.log(this.state.peopleOweToUser);\n      peopleOweToUser.push(\n        <CListGroupItem\n          accent=\"success\"\n          color=\"success\"\n          key={index}\n          className={\n            index === this.state.selectedDebtor\n              ? \"selected group_item_padding\"\n              : \"group_item_padding\"\n          }\n          style={{ borderTopWidth: \"2px\" }}\n          onClick={this.debtorSelected(index)}\n        >\n          {value.name}:<br /> <b>{value.debt}</b>\n        </CListGroupItem>\n      );\n    }\n    for (const [index, value] of Object.entries(this.state.peopleUserOwesTo)) {\n      peopleUserOwesTo.push(\n        <CListGroupItem\n          accent=\"danger\"\n          color=\"danger\"\n          key={index}\n          className={\n            index === this.state.selectedCreditor\n              ? \"selected group_item_padding\"\n              : \"group_item_padding\"\n          }\n          style={{ borderTopWidth: \"2px\" }}\n          onClick={this.creditorSelected(index)}\n        >\n          {value.name}:<br /> <b>{value.debt}</b>\n        </CListGroupItem>\n      );\n    }\n    return (\n      <div>\n        <CCard>\n          <CCardHeader style={{ textAlign: \"center\", fontWeight: \"bold\" }}>\n            Choose friends for debt rotation\n          </CCardHeader>\n          <CCardBody>\n            <CRow>\n              <CCol xs=\"6\" xl=\"6\" className=\"card_width scrollable max_height\">\n                <CCard>\n                  <CCardHeader className=\"green_text card_width\">\n                    They owe you\n                  </CCardHeader>\n                  <CCardBody className=\"card_body_items_width\">\n                    <CListGroup>{peopleOweToUser}</CListGroup>\n                  </CCardBody>\n                </CCard>\n              </CCol>\n              <CCol xs=\"6\" xl=\"6\" className=\"card_width scrollable max_height\">\n                <CCard>\n                  <CCardHeader className=\"red_text card_width\">\n                    You owe them\n                  </CCardHeader>\n                  <CCardBody className=\"card_body_items_width\">\n                    <CListGroup>{peopleUserOwesTo}</CListGroup>\n                  </CCardBody>\n                </CCard>\n              </CCol>\n            </CRow>\n          </CCardBody>\n          <CCardFooter\n            className=\"footer_contract_list_element\"\n            style={{ textAlign: \"center\" }}\n          >\n            <CButton\n              size=\"sm\"\n              color=\"dark\"\n              className=\"buttons_inside_contract_list \"\n              disabled={\n                this.state.isCreditorSelected && this.state.isDebtorSelected\n                  ? false\n                  : true\n              }\n              onClick={this.handleOpenRotationSelectAmount}\n            >\n              continue\n            </CButton>\n            <Dialog\n              open={this.state.openRotationSelectAmount}\n              onClose={this.handleCloseRotationSelectAmount}\n              aria-labelledby=\"form-dialog-title\"\n            >\n              <DialogContent>\n                <AmountToRotateRotationDialog\n                  selectedDebtor={\n                    this.state.peopleOweToUser[this.state.selectedDebtor]\n                  }\n                  selectedCreditor={\n                    this.state.peopleUserOwesTo[this.state.selectedCreditor]\n                  }\n                  mediatorAddress={this.props.address}\n                  profile={this.props.profile}\n                  handleClose={this.handleCloseRotationSelectAmount}\n                  setStateAndAmountOfExchanges={\n                    this.props.setStateAndAmountOfExchanges\n                  }\n                />\n              </DialogContent>\n            </Dialog>\n          </CCardFooter>\n        </CCard>\n      </div>\n    );\n  }\n}\n\nexport default ChooseFriendsForRotationRequest;\n","import React, { Component } from \"react\";\nimport ChooseFriendsForRotationRequest from \"./ChooseFriendsForRotationRequest\";\n\nexport class Rotation extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  render() {\n    console.log(this);\n    return (\n      <div>\n        <ChooseFriendsForRotationRequest {...this.props} />{\" \"}\n      </div>\n    );\n  }\n}\n\nexport default Rotation;\n"],"sourceRoot":""}