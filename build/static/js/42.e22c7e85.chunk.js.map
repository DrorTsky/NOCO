{"version":3,"sources":["Test.js"],"names":["Dashboard","React","lazy","playerOne","address","compiledBinaryContract","require","profile","web3","eth","Contract","profileAbi","Test","state","friendsAddress","friendRequestIndex","providedAmount","playerTwo","onSubmitAddFriendRequest","event","makeBatchRequest","a","calls","batch","BatchRequest","console","log","accounts","map","call","Promise","res","rej","req","request","from","gas","err","data","add","execute","preventDefault","getAccounts","friendsProfile","methods","addFriendRequest","send","addFriendRequestNotRestricted","onSubmitConfirmFriendRequest","getAllExchanges","friendExchanges","index","length","friendExchange","exchangePurpose","exchangeDetails","source","confirmFriendRequest","confirmFriendRequestNotRestricted","onCheckMyFriends","getFriends","onRemoveFriendsList","removeAllFriends","onSubmitAddDebtRequest","addDebtRequest","addDebtRequestNotRestricted","onSubmitConfirmDebtRequest","myExchanges","choosenRequest","setState","transaction","to","amount","getContracts","myContracts","contractExisted","i","JSON","parse","interface","existedContractAddress","currentBinaryContract","getCurrentDebt","currentDebtOfCurrentBinaryContract","accountsOfTransaction","includes","String","debtor","creditor","addTransaction","createBinaryContract","getLastContract","deployedContractAddress","currentBinaryContractAddress","getZeroAddress","newContractAddress","confirmDebtRequest","confirmDebtRequestNotRestricted","onCheckMyExchanges","onCheckMyContracts","onRemoveExchangesList","removeAllExchanges","onRemoveContractsList","removeContracts","handleChangeFriendAddress","target","value","handleChangeFriendRequestIndex","handleChangePlayerOne","handleChangeProvidedAmount","handleChangePlayerTwo","ethereum","window","enable","Component"],"mappings":"iSAKMA,EAAYC,IAAMC,MAAK,kBAAM,iCAE7BC,EAAY,6CAIZC,EAAUD,EAKVE,EAAyBC,EAAQ,KAEjCC,EAAU,IAAIC,IAAKC,IAAIC,SAASC,IAAYR,GAE5CS,E,4MACJC,MAAQ,CACNC,eAAgB,GAChBC,mBAAoB,GACpBZ,UAAW,GACXa,eAAgB,GAChBC,UAAW,I,EAgBbC,yB,uCAA2B,WAAOC,GAAP,QA8BhBC,EA9BgB,SAAAC,EAAA,6DA8BhBD,EA9BgB,SA8BCE,GACxB,IAAIC,EAAQ,IAAIf,IAAKgB,aACrBC,QAAQC,IAAIC,EAAS,IAErBL,EAAMM,KAAI,SAACC,GACT,OAAO,IAAIC,SAAQ,SAACC,EAAKC,GACvB,IAAIC,EAAMJ,EAAKK,QACb,CAAEC,KAAMR,EAAS,GAAIS,IAAK,YAC1B,SAACC,EAAKC,GACAD,EAAKL,EAAIK,GACRN,EAAIO,MAGbf,EAAMgB,IAAIN,SAGdV,EAAMiB,WA7CRrB,EAAMsB,iBADmB,SAIFjC,IAAKC,IAAIiC,cAJP,OAInBf,EAJmB,OAKzBF,QAAQC,IAAIC,GAGNgB,EAAiB,IAAInC,IAAKC,IAAIC,SAClCC,IACA,EAAKE,MAAMC,gBAebM,EAAiB,CAEfb,EAAQqC,QAAQC,iBAAiB,EAAKhC,MAAMC,gBAAgBgC,KAC5DH,EAAeC,QAAQG,8BAA8B3C,GAAS0C,OA5BvC,2C,wDAqD3BE,6B,uCAA+B,WAAO7B,GAAP,gBAuCpBC,EAvCoB,SAAAC,EAAA,6DAuCpBD,EAvCoB,SAuCHE,GACxB,IAAIC,EAAQ,IAAIf,IAAKgB,aAErBF,EAAMM,KAAI,SAACC,GACT,OAAO,IAAIC,SAAQ,SAACC,EAAKC,GACvB,IAAIC,EAAMJ,EAAKK,QACb,CAAEC,KAAMR,EAAS,GAAIS,IAAK,YAC1B,SAACC,EAAKC,GACAD,EAAKL,EAAIK,GACRN,EAAIO,MAGbf,EAAMgB,IAAIN,SAGdV,EAAMiB,WArDRrB,EAAMsB,iBADuB,SAINjC,IAAKC,IAAIiC,cAJH,cAIvBf,EAJuB,OAOvBgB,EAAiB,IAAInC,IAAKC,IAAIC,SAClCC,IACA,EAAKE,MAAMC,gBATgB,SAaD6B,EAAeC,QAAQK,kBAAkBpB,OAbxC,OAiB7B,IAJIqB,EAbyB,OAiBpBC,EAAQ,EAAGA,EAAQD,EAAgBE,OAAQD,IAMb,OAL/BE,EAAiBH,EAAgBC,IAKtBG,iBACfD,EAAeE,gBAAgBC,SAAW,EAAK3C,MAAMC,iBAErDC,EAAqBoC,GAIzB/B,EAAiB,CAIfb,EAAQqC,QAAQa,qBAAqB,GAAGX,KACxCH,EAAeC,QAAQc,kCACrB3C,GACA+B,OArCyB,4C,wDA6D/Ba,iB,uCAAmB,WAAOxC,GAAP,SAAAE,EAAA,6DACjBF,EAAMsB,iBAENhB,QAAQC,IAAI,qBAHK,KAIjBD,QAJiB,SAIClB,EAAQqC,QAAQgB,aAAa/B,OAJ9B,wBAITH,IAJS,2D,wDASnBmC,oB,uCAAsB,WAAO1C,GAAP,QAiBXC,EAjBW,SAAAC,EAAA,6DAiBXD,EAjBW,SAiBME,GACxB,IAAIC,EAAQ,IAAIf,IAAKgB,aAErBF,EAAMM,KAAI,SAACC,GACT,OAAO,IAAIC,SAAQ,SAACC,EAAKC,GACvB,IAAIC,EAAMJ,EAAKK,QACb,CAAEC,KAAMR,EAAS,GAAIS,IAAK,YAC1B,SAACC,EAAKC,GACAD,EAAKL,EAAIK,GACRN,EAAIO,MAGbf,EAAMgB,IAAIN,SAGdV,EAAMiB,WA/BRrB,EAAMsB,iBADc,SAIGjC,IAAKC,IAAIiC,cAJZ,OAIdf,EAJc,OAOdgB,EAAiB,IAAInC,IAAKC,IAAIC,SAClCC,IACA,EAAKE,MAAMC,gBAGbM,EAAiB,CAEfb,EAAQqC,QAAQkB,mBAAmBhB,KACnCH,EAAeC,QAAQkB,mBAAmBhB,OAfxB,2C,wDAyCtBiB,uB,uCAAyB,WAAO5C,GAAP,QA4BdC,EA5Bc,SAAAC,EAAA,6DA4BdD,EA5Bc,SA4BGE,GACxB,IAAIC,EAAQ,IAAIf,IAAKgB,aAGrBF,EAAMM,KAAI,SAACC,GACT,OAAO,IAAIC,SAAQ,SAACC,EAAKC,GACvB,IAAIC,EAAMJ,EAAKK,QACb,CAAEC,KAAMR,EAAS,GAAIS,IAAK,YAC1B,SAACC,EAAKC,GACAD,EAAKL,EAAIK,GACRN,EAAIO,MAGbf,EAAMgB,IAAIN,SAGdV,EAAMiB,WA3CRrB,EAAMsB,iBADiB,SAIAjC,IAAKC,IAAIiC,cAJT,OAIjBf,EAJiB,OAOjBgB,EAAiB,IAAInC,IAAKC,IAAIC,SAClCC,IACA,EAAKE,MAAMI,WAGbG,EAAiB,CAGfb,EAAQqC,QAAQoB,eACd,EAAKnD,MAAMI,UACX,EAAKJ,MAAMV,UACX,EAAKU,MAAMG,eACX,EAAKH,MAAMI,WACX6B,KACFH,EAAeC,QAAQqB,4BACrB,EAAKpD,MAAMV,UACX,EAAKU,MAAMV,UACX,EAAKU,MAAMG,eACX,EAAKH,MAAMI,WACX6B,OA1BmB,2C,wDAmDzBoB,2B,uCAA6B,WAAO/C,GAAP,gCA6GlBC,EA7GkB,SAAAC,EAAA,6DA6GlBD,EA7GkB,SA6GDE,GACxB,IAAIC,EAAQ,IAAIf,IAAKgB,aAGrBF,EAAMM,KAAI,SAACC,GACT,OAAO,IAAIC,SAAQ,SAACC,EAAKC,GACvB,IAAIC,EAAMJ,EAAKK,QACb,CAAEC,KAAMR,EAAS,GAAIS,IAAK,YAC1B,SAACC,EAAKC,GACAD,EAAKL,EAAIK,GACRN,EAAIO,MAGbf,EAAMgB,IAAIN,SAGdV,EAAMiB,WA5HRrB,EAAMsB,iBADqB,SAIJjC,IAAKC,IAAIiC,cAJL,cAIrBf,EAJqB,gBAOHpB,EAAQqC,QAAQK,kBAAkBpB,OAP/B,cAOvBsC,EAPuB,OAQvBC,EAAiBD,EAAY,GAEjC,EAAKE,SAAS,CAAEpD,UAAWmD,EAAeE,YAAYnC,OACtD,EAAKkC,SAAS,CAAElE,UAAWiE,EAAeE,YAAYC,KACtD,EAAKF,SAAS,CAAErD,eAAgBoD,EAAeE,YAAYE,SAZhC,UAcHjE,EAAQqC,QAAQ6B,eAAe5C,OAd5B,QAcvB6C,EAduB,OAkBvBC,GAAkB,EAEbC,EAAI,EApBc,aAoBXA,EAAIF,EAAYtB,QApBL,kCAsBS,IAAI5C,IAAKC,IAAIC,SAC7CmE,KAAKC,MAAMzE,EAAuB0E,WACjCC,EAAyBN,EAAYE,IAxBf,eAsBrBK,EAtBqB,iBA2BsBA,EAAsBrC,QAClEsC,iBACArD,OA7BsB,WA2BrBsD,EA3BqB,SA8BrBC,EAAwB,CAAC,EAAKvE,MAAMV,UAAW,EAAKU,MAAMI,YAGtCoE,SACpBC,OAAOH,EAAmCI,WAE5CH,EAAsBC,SACpBC,OAAOH,EAAmCK,WArCrB,kCA0CjBP,EAAsBrC,QACzB6C,eACC,EAAK5E,MAAMV,UACX,EAAKU,MAAMG,eACX,EAAKH,MAAMI,WAEZ6B,KAAK,CACJX,KAAMR,EAAS,GACfS,IAAK,YAlDc,eAqDvBuC,GAAkB,EArDK,6BAoBaC,IApBb,2BA2DtBD,EA3DsB,kCA6DnBpE,EAAQqC,QACX8C,qBACC,EAAK7E,MAAMV,UACX,EAAKU,MAAMG,eACX,EAAKH,MAAMI,WAEZ6B,KAAK,CACJX,KAAMR,EAAS,GACfS,IAAK,YArEgB,eAwEzBX,QAAQC,IAAI,6CAxEa,UA0EOnB,EAAQqC,QAAQ+C,kBAAkB9D,OA1EzC,QA0EzB+D,EA1EyB,sBA6EvBC,EAA+BlB,EAC/BK,EACAY,EA/EuB,UAgFO,IAAIpF,IAAKC,IAAIC,SAC7CmE,KAAKC,MAAMzE,EAAuB0E,WAClCc,GAlFyB,kBAqFvBlD,EAAiB,IAAInC,IAAKC,IAAIC,SAChCC,IACA,EAAKE,MAAMI,YAIY0D,EA3FE,kCA4FjBpE,EAAQqC,QAAQkD,iBAAiBjE,OA5FhB,iDA6FvB+D,EA7FuB,QA2FvBG,EA3FuB,KA+F3B3E,EAAiB,CAKfb,EAAQqC,QAAQoD,mBAAmB,GAAGlD,KAItCH,EAAeC,QAAQqD,gCACrB,EACAF,GACAjD,OA3GuB,4C,wDAoI7BoD,mB,uCAAqB,WAAO/E,GAAP,SAAAE,EAAA,6DACnBF,EAAMsB,iBAENhB,QAAQC,IAAI,uBAHO,KAInBD,QAJmB,SAIDlB,EAAQqC,QAAQK,kBAAkBpB,OAJjC,wBAIXH,IAJW,2D,wDASrByE,mB,uCAAqB,WAAOhF,GAAP,SAAAE,EAAA,6DACnBF,EAAMsB,iBAENhB,QAAQC,IAAI,uBAHO,KAInBD,QAJmB,SAIDlB,EAAQqC,QAAQ6B,eAAe5C,OAJ9B,wBAIXH,IAJW,2D,wDASrB0E,sB,uCAAwB,WAAOjF,GAAP,QAiBbC,EAjBa,SAAAC,EAAA,6DAiBbD,EAjBa,SAiBIE,GACxB,IAAIC,EAAQ,IAAIf,IAAKgB,aAErBF,EAAMM,KAAI,SAACC,GACT,OAAO,IAAIC,SAAQ,SAACC,EAAKC,GACvB,IAAIC,EAAMJ,EAAKK,QACb,CAAEC,KAAMR,EAAS,GAAIS,IAAK,YAC1B,SAACC,EAAKC,GACAD,EAAKL,EAAIK,GACRN,EAAIO,MAGbf,EAAMgB,IAAIN,SAGdV,EAAMiB,WA/BRrB,EAAMsB,iBADgB,SAICjC,IAAKC,IAAIiC,cAJV,OAIhBf,EAJgB,OAOhBgB,EAAiB,IAAInC,IAAKC,IAAIC,SAClCC,IACA,EAAKE,MAAMI,WAGbG,EAAiB,CAEfb,EAAQqC,QAAQyD,qBAAqBvD,KACrCH,EAAeC,QAAQyD,qBAAqBvD,OAfxB,2C,wDAsCxBwD,sB,uCAAwB,WAAOnF,GAAP,QAiBbC,EAjBa,SAAAC,EAAA,6DAiBbD,EAjBa,SAiBIE,GACxB,IAAIC,EAAQ,IAAIf,IAAKgB,aAErBF,EAAMM,KAAI,SAACC,GACT,OAAO,IAAIC,SAAQ,SAACC,EAAKC,GACvB,IAAIC,EAAMJ,EAAKK,QACb,CAAEC,KAAMR,EAAS,GAAIS,IAAK,YAC1B,SAACC,EAAKC,GACAD,EAAKL,EAAIK,GACRN,EAAIO,MAGbf,EAAMgB,IAAIN,SAGdV,EAAMiB,WA/BRrB,EAAMsB,iBADgB,SAICjC,IAAKC,IAAIiC,cAJV,OAIhBf,EAJgB,OAOhBgB,EAAiB,IAAInC,IAAKC,IAAIC,SAClCC,IACA,EAAKE,MAAMI,WAGbG,EAAiB,CAEfb,EAAQqC,QAAQ2D,kBAAkBzD,KAClCH,EAAeC,QAAQ2D,kBAAkBzD,OAfrB,2C,wDAwCxB0D,0BAA4B,SAACrF,GAC3BA,EAAMsB,iBACN,EAAK4B,SAAS,CAAEvD,eAAgBK,EAAMsF,OAAOC,S,EAG/CC,+BAAiC,SAACxF,GAChCA,EAAMsB,iBACN,EAAK4B,SAAS,CAAEtD,mBAAoBI,EAAMsF,OAAOC,S,EAGnDE,sBAAwB,SAACzF,GACvBA,EAAMsB,iBACN,EAAK4B,SAAS,CAAElE,UAAWgB,EAAMsF,OAAOC,S,EAG1CG,2BAA6B,SAAC1F,GAC5BA,EAAMsB,iBACN,EAAK4B,SAAS,CAAErD,eAAgBG,EAAMsF,OAAOC,S,EAG/CI,sBAAwB,SAAC3F,GACvBA,EAAMsB,iBACN,EAAK4B,SAAS,CAAEpD,UAAWE,EAAMsF,OAAOC,S,qLA1dhB,qBADpBK,EAAWC,OAAOD,U,gCAEdA,EAASE,S,gIA6djB,OACE,cAACjH,EAAD,Q,GA5eakH,aAimBJtG","file":"static/js/42.e22c7e85.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n// import \"./App.css\";\nimport web3 from \"./web3.js\";\nimport profileAbi from \"./profile\";\n\nconst Dashboard = React.lazy(() => import(\"./views/dashboard/Dashboard\"));\n\nconst playerOne = \"0xe5CC286DeB70167dab81c776e1f7cDfaDA43F8ca\";\n\n// I make then 2 different variables as I try to make these 2 different scenarios detailed as possible.\n// In our frontend these 2 variables will be the same one\nconst address = playerOne;\n\n// For testing purposes only!\nconst playerTwo = \"0xC3E4e88A37A5Cfd425E8aAb987b2e4F789De639d\";\n\nconst compiledBinaryContract = require(\"./solidity/build/BinaryContract.json\");\n\nconst profile = new web3.eth.Contract(profileAbi, playerOne);\n\nclass Test extends Component {\n  state = {\n    friendsAddress: \"\",\n    friendRequestIndex: \"\",\n    playerOne: \"\",\n    providedAmount: \"\",\n    playerTwo: \"\",\n    // validityInDays: \"\",\n    // message: \"\",\n  };\n\n  async componentDidMount() {\n    let ethereum = window.ethereum;\n    if (typeof ethereum !== \"undefined\") {\n      await ethereum.enable();\n    }\n  }\n\n  // TODO Omer: rename exchange -> request\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  // Add a friend exchange for both our exchanges and friend exchanges\n  onSubmitAddFriendRequest = async (event) => {\n    event.preventDefault();\n\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n    console.log(accounts);\n\n    // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us friendsProfile address\n    const friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.friendsAddress\n    );\n\n    // NOTE: that's how I convert between a batch request and 2 seperate \"send\" requests:\n\n    // // Sending friend requests\n    // await friendsProfile.methods\n    //   .addFriendRequestNotRestricted(playerOne)\n    //   .send({ from: accounts[0], gas: 1000000 });\n\n    // // Sending profile requests\n    // await profile.methods\n    //   .addFriendRequest(this.state.friendsAddress)\n    //   .send({ from: accounts[0], gas: 1000000 });\n\n    makeBatchRequest([\n      // add both of the exchanges in a batch request.\n      profile.methods.addFriendRequest(this.state.friendsAddress).send,\n      friendsProfile.methods.addFriendRequestNotRestricted(address).send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n      console.log(accounts[0]);\n\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"1000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  // Confirm a friend exchange for both our exchanges and friend exchanges\n  onSubmitConfirmFriendRequest = async (event) => {\n    event.preventDefault();\n\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n\n    // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us friendsProfile address\n    const friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.friendsAddress\n    );\n\n    //Finding friend's exchange index:\n    let friendExchanges = await friendsProfile.methods.getAllExchanges().call();\n\n    let friendRequestIndex;\n\n    for (let index = 0; index < friendExchanges.length; index++) {\n      const friendExchange = friendExchanges[index];\n\n      //\"0\" represents addFriendRequest Enum\n      if (\n        // if it is a friendRequest and the source is my friend\n        friendExchange.exchangePurpose === \"0\" &&\n        friendExchange.exchangeDetails.source === this.state.friendsAddress\n      ) {\n        friendRequestIndex = index;\n      }\n    }\n\n    makeBatchRequest([\n      // add both of the exchanges in a batch request.\n\n      // In our frontend the user will choose the correct request, here I test it with 0 as there is only one request\n      profile.methods.confirmFriendRequest(0).send,\n      friendsProfile.methods.confirmFriendRequestNotRestricted(\n        friendRequestIndex\n      ).send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"1000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  // Getting my friends\n  onCheckMyFriends = async (event) => {\n    event.preventDefault();\n\n    console.log(\"your friends are:\");\n    console.log(await profile.methods.getFriends().call());\n  };\n\n  //////////////////////////////////////////////////////////////////////////////////////\n  // Remove Friends list for both our friends and friend's friends\n  onRemoveFriendsList = async (event) => {\n    event.preventDefault();\n\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n\n    // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us friend's profile address\n    const friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.friendsAddress\n    );\n\n    makeBatchRequest([\n      // remove both of the exchanges in a batch request.\n      profile.methods.removeAllFriends().send,\n      friendsProfile.methods.removeAllFriends().send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"1000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////////////////////////\n  ///////////////////////    BINARY_CONTRACT PART         //////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  // Add a debt request for both our exchanges and target exchanges\n  onSubmitAddDebtRequest = async (event) => {\n    event.preventDefault();\n\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n\n    // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us friendsProfile address\n    const friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.playerTwo\n    );\n\n    makeBatchRequest([\n      // add both of the exchanges in a batch request.\n      // the difference: addDebtRequest(destination, same other args), addDebtRequestNotRestricted(source, same other args)\n      profile.methods.addDebtRequest(\n        this.state.playerTwo,\n        this.state.playerOne,\n        this.state.providedAmount,\n        this.state.playerTwo\n      ).send,\n      friendsProfile.methods.addDebtRequestNotRestricted(\n        this.state.playerOne,\n        this.state.playerOne,\n        this.state.providedAmount,\n        this.state.playerTwo\n      ).send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n\n      // let promises = calls.map(call => {\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"1000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  // Confirm a debt request for both our exchanges and target exchanges\n  onSubmitConfirmDebtRequest = async (event) => {\n    event.preventDefault();\n\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n\n    // Setting this.state.{playerOne, Two, amount} from the request details:\n    let myExchanges = await profile.methods.getAllExchanges().call();\n    let choosenRequest = myExchanges[0]; // TODO: I use myExchanges[0] for testing only! The user will pick the correct one\n\n    this.setState({ playerTwo: choosenRequest.transaction.from });\n    this.setState({ playerOne: choosenRequest.transaction.to });\n    this.setState({ providedAmount: choosenRequest.transaction.amount });\n\n    let myContracts = await profile.methods.getContracts().call();\n\n    let existedContractAddress; // if a contract will be deployed, we will use this variable. Otherwise, we will use deployedContractAddress\n    let deployedContractAddress;\n    let contractExisted = false;\n\n    for (var i = 0; i < myContracts.length; i++) {\n      // in this for loop we try to find if a contract exist, or we should create one\n      let currentBinaryContract = await new web3.eth.Contract(\n        JSON.parse(compiledBinaryContract.interface),\n        (existedContractAddress = myContracts[i])\n      );\n\n      let currentDebtOfCurrentBinaryContract = await currentBinaryContract.methods\n        .getCurrentDebt()\n        .call();\n      let accountsOfTransaction = [this.state.playerOne, this.state.playerTwo];\n\n      if (\n        accountsOfTransaction.includes(\n          String(currentDebtOfCurrentBinaryContract.debtor)\n        ) &&\n        accountsOfTransaction.includes(\n          String(currentDebtOfCurrentBinaryContract.creditor)\n        )\n      ) {\n        // it means that the contract already exist\n\n        await currentBinaryContract.methods\n          .addTransaction(\n            this.state.playerOne,\n            this.state.providedAmount,\n            this.state.playerTwo\n          )\n          .send({\n            from: accounts[0],\n            gas: \"2000000\",\n          });\n\n        contractExisted = true;\n\n        break;\n      }\n    } // end of for loop - now we know if the contract existed or not\n\n    if (!contractExisted) {\n      // deploy a binaryContract\n      await profile.methods\n        .createBinaryContract(\n          this.state.playerOne,\n          this.state.providedAmount,\n          this.state.playerTwo\n        )\n        .send({\n          from: accounts[0],\n          gas: \"4000000\",\n        });\n\n      console.log(\"Binary contract was created successfully!\");\n\n      deployedContractAddress = await profile.methods.getLastContract().call();\n    }\n\n    let currentBinaryContractAddress = contractExisted\n      ? existedContractAddress\n      : deployedContractAddress;\n    let currentBinaryContract = await new web3.eth.Contract(\n      JSON.parse(compiledBinaryContract.interface),\n      currentBinaryContractAddress\n    );\n\n    let friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.playerTwo\n    );\n\n    // we assign a zeroAddress if the contract already existed. Otherwise, the deployed contract address\n    let newContractAddress = contractExisted\n      ? await profile.methods.getZeroAddress().call()\n      : deployedContractAddress;\n\n    makeBatchRequest([\n      // remove both of the exchanges in a batch request.\n\n      // We call this method in order to remove our exchange on the profile (solidity)\n      // TODO: when implementing it with the actual frontend, we should send the actual index instead of \"0\"\n      profile.methods.confirmDebtRequest(0).send,\n\n      // We call this method in order to remove friend's exchange (solidity method)\n      // TODO: when implementing it with the actual frontend, we should send the actual index instead of \"0\"\n      friendsProfile.methods.confirmDebtRequestNotRestricted(\n        0,\n        newContractAddress\n      ).send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n\n      // let promises = calls.map(call => {\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"2000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  // Getting my exchanges\n  onCheckMyExchanges = async (event) => {\n    event.preventDefault();\n\n    console.log(\"your exchanges are:\");\n    console.log(await profile.methods.getAllExchanges().call());\n  };\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  // Getting my contracts\n  onCheckMyContracts = async (event) => {\n    event.preventDefault();\n\n    console.log(\"your contracts are:\");\n    console.log(await profile.methods.getContracts().call());\n  };\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  // Remove Exchanges list for both our exchanges and friend exchanges\n  onRemoveExchangesList = async (event) => {\n    event.preventDefault();\n\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n\n    // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us playerTwo's address\n    const friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.playerTwo\n    );\n\n    makeBatchRequest([\n      // remove both of the exchanges in a batch request.\n      profile.methods.removeAllExchanges().send,\n      friendsProfile.methods.removeAllExchanges().send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"2000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////////////////////////\n  // Remove Contracts list for both our contracts and friend contracts\n  onRemoveContractsList = async (event) => {\n    event.preventDefault();\n\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n\n    // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us playerTwo's address\n    const friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.playerTwo\n    );\n\n    makeBatchRequest([\n      // remove both of the exchanges in a batch request.\n      profile.methods.removeContracts().send,\n      friendsProfile.methods.removeContracts().send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"2000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  };\n\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  // All the handlers:\n\n  handleChangeFriendAddress = (event) => {\n    event.preventDefault();\n    this.setState({ friendsAddress: event.target.value });\n  };\n\n  handleChangeFriendRequestIndex = (event) => {\n    event.preventDefault();\n    this.setState({ friendRequestIndex: event.target.value });\n  };\n\n  handleChangePlayerOne = (event) => {\n    event.preventDefault();\n    this.setState({ playerOne: event.target.value });\n  };\n\n  handleChangeProvidedAmount = (event) => {\n    event.preventDefault();\n    this.setState({ providedAmount: event.target.value });\n  };\n\n  handleChangePlayerTwo = (event) => {\n    event.preventDefault();\n    this.setState({ playerTwo: event.target.value });\n  };\n\n  render() {\n    return (\n      <Dashboard />\n      // <div>\n      //   {/* <Dashboard /> */}\n      //   <h2>Friends Part</h2>\n      //   <form onSubmit={this.onSubmitAddFriendRequest}>\n      //     <label>\n      //       Add a friend: insert here the friend's address\n      //       <input\n      //         type=\"text\"\n      //         value={this.state.friendsAddress}\n      //         onChange={this.handleChangeFriendAddress}\n      //         name=\"name\"\n      //       />\n      //     </label>\n      //     <input type=\"submit\" value=\"Send a friend Request!\" />\n      //   </form>\n\n      //   <form onSubmit={this.onSubmitConfirmFriendRequest}>\n      //     <label>\n      //       Confirm a friend request (insert friend's address)\n      //       <input\n      //         type=\"text\"\n      //         value={this.state.friendsAddress}\n      //         onChange={this.handleChangeFriendAddress}\n      //         name=\"name\"\n      //       />\n      //     </label>\n      //     <input type=\"submit\" value=\"Confirm a friend Request!\" />\n      //   </form>\n\n      //   <form onSubmit={this.onCheckMyFriends}>\n      //     <label>Click here to check your Friends!</label>\n      //     <input type=\"submit\" value=\"Check your Friends!\" />\n      //   </form>\n\n      //   <form onSubmit={this.onRemoveFriendsList}>\n      //     <label>Click here to remove your Friends!</label>\n      //     <input type=\"submit\" value=\"Remove your Friends!\" />\n      //   </form>\n      //   <hr />\n      //   {/* ****************************************************************** */}\n      //   <h2>BinaryContract Part</h2>\n\n      //   <form onSubmit={this.onSubmitAddDebtRequest}>\n      //     <label>\n      //       playerOne-amount-playerTwo\n      //       <input\n      //         type=\"text\"\n      //         value={this.state.playerOne}\n      //         onChange={this.handleChangePlayerOne}\n      //         name=\"name\"\n      //       />\n      //       <input\n      //         type=\"text\"\n      //         value={this.state.providedAmount}\n      //         onChange={this.handleChangeProvidedAmount}\n      //         name=\"name\"\n      //       />\n      //       <input\n      //         type=\"text\"\n      //         value={this.state.playerTwo}\n      //         onChange={this.handleChangePlayerTwo}\n      //         name=\"name\"\n      //       />\n      //     </label>\n      //     <input type=\"submit\" value=\"Send a Debt Request!\" />\n      //   </form>\n\n      //   <form onSubmit={this.onSubmitConfirmDebtRequest}>\n      //     <label>\n      //       playerOne-amount-playerTwo\n      //       <input\n      //         type=\"text\"\n      //         value={this.state.playerOne}\n      //         onChange={this.handleChangePlayerOne}\n      //         name=\"name\"\n      //       />\n      //       <input\n      //         type=\"text\"\n      //         value={this.state.providedAmount}\n      //         onChange={this.handleChangeProvidedAmount}\n      //         name=\"name\"\n      //       />\n      //       <input\n      //         type=\"text\"\n      //         value={this.state.playerTwo}\n      //         onChange={this.handleChangePlayerTwo}\n      //         name=\"name\"\n      //       />\n      //     </label>\n      //     <input type=\"submit\" value=\"Confirm a Debt Request!\" />\n      //   </form>\n\n      //   <form onSubmit={this.onCheckMyContracts}>\n      //     <label>Click here to check your contracts!</label>\n      //     <input type=\"submit\" value=\"Check your contracts!\" />\n      //   </form>\n\n      //   <form onSubmit={this.onCheckMyExchanges}>\n      //     <label>Click here to check your Exchanges!</label>\n      //     <input type=\"submit\" value=\"Check your Exchanges!\" />\n      //   </form>\n\n      //   <form onSubmit={this.onRemoveContractsList}>\n      //     <label>Click here to remove your Contracts!</label>\n      //     <input type=\"submit\" value=\"Remove your Contracts!\" />\n      //   </form>\n\n      //   <form onSubmit={this.onRemoveExchangesList}>\n      //     <label>Click here to remove your Exchanges!</label>\n      //     <input type=\"submit\" value=\"Remove your Exchanges!\" />\n      //   </form>\n      // </div>\n    );\n  }\n}\n\nexport default Test;\n"],"sourceRoot":""}