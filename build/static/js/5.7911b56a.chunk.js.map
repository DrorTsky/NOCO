{"version":3,"sources":["views/dashboard/Dashboard.js"],"names":["playerOne","playerTwo","compiledBinaryContract","require","profile","web3","eth","Contract","profileAbi","Dashboard","props","addFriendFormSubmit","event","makeBatchRequest","a","calls","batch","BatchRequest","map","call","Promise","res","rej","req","request","from","accounts","gas","err","data","add","execute","preventDefault","getAccounts","friendsProfile","state","friendsAddress","methods","addFriendRequest","send","addFriendRequestNotRestricted","onCheckMyFriends","getFriends","friendsList","setState","onRemoveFriendsList","console","log","removeAllFriends","onSubmitAddDebtRequest","addDebtRequest","providedAmount","addDebtRequestNotRestricted","onSubmitConfirmDebtRequest","getAllExchanges","myExchanges","choosenRequest","transaction","to","amount","getContracts","myContracts","contractExisted","i","length","JSON","parse","interface","existedContractAddress","currentBinaryContract","getCurrentDebt","currentDebtOfCurrentBinaryContract","accountsOfTransaction","includes","String","debtor","creditor","addTransaction","createBinaryContract","getLastContract","deployedContractAddress","currentBinaryContractAddress","getZeroAddress","newContractAddress","confirmDebtRequest","confirmDebtRequestNotRestricted","onCheckMyExchanges","undefined","resolve","exchanges","then","onCheckMyContracts","contractsList","onRemoveExchangesList","removeAllExchanges","onRemoveContractsList","removeContracts","friendRequestIndex","onChangeFormInput","bind","onSubmitConfirmFriendRequest","updateRemovedFriends","this","ethereum","window","enable","friendExchanges","index","friendExchange","exchangePurpose","exchangeDetails","source","confirmFriendRequest","confirmFriendRequestNotRestricted","target","name","value","xs","md","action","method","className","onSubmit","row","id","placeholder","onChange","type","size","color","xl","friend","onClick","sm","autoComplete","contract","date","Component"],"mappings":"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","file":"static/js/5.7911b56a.chunk.js","sourcesContent":["import React, { lazy, Component } from \"react\";\n\n// TEST RELATED\nimport web3 from \"../../web3.js\";\nimport profileAbi from \"../../profile\";\n\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CRow,\n  CForm,\n  CFormGroup,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CInputGroupAppend,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\n\nconst playerOne = \"0xC3E4e88A37A5Cfd425E8aAb987b2e4F789De639d\";\n\n// I make then 2 different variables as I try to make these 2 different scenarios detailed as possible.\n// In our frontend these 2 variables will be the same one\nconst address = playerOne;\n\n// For testing purposes only!\nconst playerTwo = \"0xe5CC286DeB70167dab81c776e1f7cDfaDA43F8ca\";\n\nconst compiledBinaryContract = require(\"../../solidity/build/BinaryContract.json\");\n\nconst profile = new web3.eth.Contract(profileAbi, playerOne);\n// **************************** */\n\n// const WidgetsDropdown = lazy(() => import(\"../widgets/WidgetsDropdown.js\"));\n// const WidgetsBrand = lazy(() => import(\"../widgets/WidgetsBrand.js\"));\n\nexport class Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      friendsAddress: playerTwo,\n      friendRequestIndex: \"\",\n      playerOne: playerOne,\n      providedAmount: \"\",\n      playerTwo: playerTwo,\n      friendsList: [],\n      exchanges: {},\n      contractsList: [],\n    };\n\n    this.onChangeFormInput = this.onChangeFormInput.bind(this);\n    this.addFriendFormSubmit = this.addFriendFormSubmit.bind(this);\n    this.onSubmitConfirmFriendRequest = this.onSubmitConfirmFriendRequest.bind(\n      this\n    );\n    this.onCheckMyFriends = this.onCheckMyFriends.bind(this);\n    this.onRemoveFriendsList = this.onRemoveFriendsList.bind(this);\n    this.updateRemovedFriends = this.updateRemovedFriends.bind(this);\n    this.onSubmitAddDebtRequest = this.onSubmitAddDebtRequest.bind(this);\n    this.onSubmitConfirmDebtRequest = this.onSubmitConfirmDebtRequest.bind(\n      this\n    );\n  }\n\n  async componentDidMount() {\n    console.log(this.state.friendsList);\n    let ethereum = window.ethereum;\n    if (typeof ethereum !== \"undefined\") {\n      await ethereum.enable();\n    }\n    this.onCheckMyExchanges();\n    this.onCheckMyContracts();\n    this.onCheckMyFriends();\n  }\n\n  // *****************************************************\n  //                  ADD FRIEND\n  // *****************************************************\n  addFriendFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n    // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us friendsProfile address\n    const friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.friendsAddress\n    );\n\n    // NOTE: that's how I convert between a batch request and 2 seperate \"send\" requests:\n\n    makeBatchRequest([\n      // add both of the exchanges in a batch request.\n      profile.methods.addFriendRequest(this.state.friendsAddress).send,\n      friendsProfile.methods.addFriendRequestNotRestricted(address).send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"1000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  };\n\n  // *****************************************************\n  //                  CONFIRM FRIEND\n  // *****************************************************\n  async onSubmitConfirmFriendRequest(event) {\n    event.preventDefault();\n\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n\n    // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us friendsProfile address\n    const friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.friendsAddress\n    );\n\n    //Finding friend's exchange index:\n    let friendExchanges = await friendsProfile.methods.getAllExchanges().call();\n\n    let friendRequestIndex;\n\n    for (let index = 0; index < friendExchanges.length; index++) {\n      const friendExchange = friendExchanges[index];\n\n      //\"0\" represents addFriendRequest Enum\n      if (\n        // if it is a friendRequest and the source is my friend\n        friendExchange.exchangePurpose === \"0\" &&\n        friendExchange.exchangeDetails.source === this.state.friendsAddress\n      ) {\n        friendRequestIndex = index;\n      }\n    }\n\n    makeBatchRequest([\n      // add both of the exchanges in a batch request.\n\n      // In our frontend the user will choose the correct request, here I test it with 0 as there is only one request\n      profile.methods.confirmFriendRequest(0).send,\n      friendsProfile.methods.confirmFriendRequestNotRestricted(\n        friendRequestIndex\n      ).send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"1000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  }\n  // *****************************************************\n  //                  GET FRIENDS\n  // *****************************************************\n\n  onCheckMyFriends = async () => {\n    // console.log(\"your friends are:\");\n    // console.log(await profile.methods.getFriends().call());\n    this.setState({ friendsList: await profile.methods.getFriends().call() });\n    // console.log(this.state.friendsList);\n  };\n\n  // *****************************************************\n  //                  REMOVE FRIENDS\n  // *****************************************************\n  async updateRemovedFriends() {\n    console.log(\"in remove friends\");\n    Promise.resolve(this.onRemoveFriendsList()).then(\n      this.setState({ friendsList: await profile.methods.getFriends().call() })\n      // this.setState({\n      //   ...this.state,\n      //   friendsList: {\n      //     ...this.state.friendsList,\n      //     [address]: await profile.methods.getFriends().call(),\n      //   },\n      // })\n    );\n  }\n  onRemoveFriendsList = async () => {\n    // event.preventDefault();\n    console.log(\"in onRemoveFriendsList\");\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n\n    // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us friend's profile address\n    const friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.friendsAddress\n    );\n\n    makeBatchRequest([\n      // remove both of the exchanges in a batch request.\n      profile.methods.removeAllFriends().send,\n      friendsProfile.methods.removeAllFriends().send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n\n      console.log(accounts[0]);\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"1000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  };\n\n  // *****************************************************\n  //               BINARY_CONTRACT PART\n  // *****************************************************\n\n  // Add a debt request for both our exchanges and target exchanges\n  onSubmitAddDebtRequest = async (event) => {\n    event.preventDefault();\n\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n\n    // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us friendsProfile address\n    const friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.playerTwo\n    );\n\n    makeBatchRequest([\n      // add both of the exchanges in a batch request.\n      // the difference: addDebtRequest(destination, same other args), addDebtRequestNotRestricted(source, same other args)\n      profile.methods.addDebtRequest(\n        this.state.playerTwo,\n        this.state.playerOne,\n        this.state.providedAmount,\n        this.state.playerTwo\n      ).send,\n      friendsProfile.methods.addDebtRequestNotRestricted(\n        this.state.playerOne,\n        this.state.playerOne,\n        this.state.providedAmount,\n        this.state.playerTwo\n      ).send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n\n      // let promises = calls.map(call => {\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"1000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  // Confirm a debt request for both our exchanges and target exchanges\n  onSubmitConfirmDebtRequest = async (event) => {\n    event.preventDefault();\n\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n\n    // Setting this.state.{playerOne, Two, amount} from the request details:\n    let myExchanges = await profile.methods.getAllExchanges().call();\n    let choosenRequest = myExchanges[0]; // TODO: I use myExchanges[0] for testing only! The user will pick the correct one\n\n    this.setState({ playerTwo: choosenRequest.transaction.from });\n    this.setState({ playerOne: choosenRequest.transaction.to });\n    this.setState({ providedAmount: choosenRequest.transaction.amount });\n\n    let myContracts = await profile.methods.getContracts().call();\n\n    let existedContractAddress; // if a contract will be deployed, we will use this variable. Otherwise, we will use deployedContractAddress\n    let deployedContractAddress;\n    let contractExisted = false;\n\n    for (var i = 0; i < myContracts.length; i++) {\n      // in this for loop we try to find if a contract exist, or we should create one\n      let currentBinaryContract = await new web3.eth.Contract(\n        JSON.parse(compiledBinaryContract.interface),\n        (existedContractAddress = myContracts[i])\n      );\n\n      let currentDebtOfCurrentBinaryContract = await currentBinaryContract.methods\n        .getCurrentDebt()\n        .call();\n      let accountsOfTransaction = [this.state.playerOne, this.state.playerTwo];\n\n      if (\n        accountsOfTransaction.includes(\n          String(currentDebtOfCurrentBinaryContract.debtor)\n        ) &&\n        accountsOfTransaction.includes(\n          String(currentDebtOfCurrentBinaryContract.creditor)\n        )\n      ) {\n        // it means that the contract already exist\n\n        await currentBinaryContract.methods\n          .addTransaction(\n            this.state.playerOne,\n            this.state.providedAmount,\n            this.state.playerTwo\n          )\n          .send({\n            from: accounts[0],\n            gas: \"2000000\",\n          });\n\n        contractExisted = true;\n\n        break;\n      }\n    } // end of for loop - now we know if the contract existed or not\n\n    if (!contractExisted) {\n      // deploy a binaryContract\n      await profile.methods\n        .createBinaryContract(\n          this.state.playerOne,\n          this.state.providedAmount,\n          this.state.playerTwo\n        )\n        .send({\n          from: accounts[0],\n          gas: \"4000000\",\n        });\n\n      console.log(\"Binary contract was created successfully!\");\n\n      deployedContractAddress = await profile.methods.getLastContract().call();\n    }\n\n    let currentBinaryContractAddress = contractExisted\n      ? existedContractAddress\n      : deployedContractAddress;\n    let currentBinaryContract = await new web3.eth.Contract(\n      JSON.parse(compiledBinaryContract.interface),\n      currentBinaryContractAddress\n    );\n\n    let friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.playerTwo\n    );\n\n    // we assign a zeroAddress if the contract already existed. Otherwise, the deployed contract address\n    let newContractAddress = contractExisted\n      ? await profile.methods.getZeroAddress().call()\n      : deployedContractAddress;\n\n    makeBatchRequest([\n      // remove both of the exchanges in a batch request.\n\n      // We call this method in order to remove our exchange on the profile (solidity)\n      // TODO: when implementing it with the actual frontend, we should send the actual index instead of \"0\"\n      profile.methods.confirmDebtRequest(0).send,\n\n      // We call this method in order to remove friend's exchange (solidity method)\n      // TODO: when implementing it with the actual frontend, we should send the actual index instead of \"0\"\n      friendsProfile.methods.confirmDebtRequestNotRestricted(\n        0,\n        newContractAddress\n      ).send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n\n      // let promises = calls.map(call => {\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"2000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  // Getting my exchanges\n  onCheckMyExchanges = async () => {\n    console.log(\"your exchanges are:\");\n    if ((await profile.methods.getAllExchanges().call())[0] !== undefined) {\n      console.log((await profile.methods.getAllExchanges().call())[0]);\n      var exchange = {};\n      Promise.resolve(\n        (exchange = (await profile.methods.getAllExchanges().call())[0]\n          .transaction)\n      ).then(\n        this.setState({\n          exchanges: (await profile.methods.getAllExchanges().call())[0]\n            .transaction,\n        })\n      );\n    }\n  };\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  // Getting my contracts\n  onCheckMyContracts = async () => {\n    // console.log(\"your contracts are:\");\n    // console.log(await profile.methods.getContracts().call());\n    this.setState({\n      contractsList: await profile.methods.getContracts().call(),\n    });\n    console.log(this.state.exchanges);\n  };\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  // Remove Exchanges list for both our exchanges and friend exchanges\n  onRemoveExchangesList = async (event) => {\n    event.preventDefault();\n\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n\n    // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us playerTwo's address\n    const friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.playerTwo\n    );\n\n    makeBatchRequest([\n      // remove both of the exchanges in a batch request.\n      profile.methods.removeAllExchanges().send,\n      friendsProfile.methods.removeAllExchanges().send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"2000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////////////////////////\n  // Remove Contracts list for both our contracts and friend contracts\n  onRemoveContractsList = async (event) => {\n    event.preventDefault();\n\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n\n    // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us playerTwo's address\n    const friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.playerTwo\n    );\n\n    makeBatchRequest([\n      // remove both of the exchanges in a batch request.\n      profile.methods.removeContracts().send,\n      friendsProfile.methods.removeContracts().send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"2000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  };\n\n  // *****************************************************\n  //                  FORM CHANGE HANDLERS\n  // *****************************************************\n\n  onChangeFormInput(event) {\n    event.preventDefault();\n    const {\n      target: { name, value },\n    } = event;\n    this.setState({ [name]: value });\n  }\n\n  // *****************************************************\n  //                       RENDER\n  // *****************************************************\n\n  render() {\n    return (\n      <>\n        <CRow>\n          <CCol xs=\"12\" md=\"4\">\n            <CCard>\n              <CForm\n                action=\"\"\n                method=\"post\"\n                className=\"form-horizontal\"\n                onSubmit={this.addFriendFormSubmit}\n              >\n                <CCardHeader>Add Friend</CCardHeader>\n                <CCardBody>\n                  <CFormGroup row>\n                    <CCol md=\"12\">\n                      <CInputGroup>\n                        <CInputGroupPrepend>\n                          <CInputGroupText>\n                            <CIcon name=\"cil-user\" />\n                          </CInputGroupText>\n                        </CInputGroupPrepend>\n                        <CInput\n                          id=\"input1-group1\"\n                          name=\"friendsAddress\"\n                          placeholder=\"Username\"\n                          value={this.state.friendsAddress}\n                          onChange={this.onChangeFormInput}\n                        />\n                      </CInputGroup>\n                    </CCol>\n                  </CFormGroup>\n                </CCardBody>\n                <CCardFooter>\n                  <CButton type=\"submit\" size=\"sm\" color=\"success\">\n                    <CIcon name=\"cil-scrubber\" /> Submit\n                  </CButton>\n                  <CButton type=\"reset\" size=\"sm\" color=\"danger\">\n                    <CIcon name=\"cil-ban\" /> Reset\n                  </CButton>\n                </CCardFooter>\n              </CForm>\n            </CCard>\n          </CCol>\n          <CCol xs=\"12\" md=\"4\">\n            <CCard>\n              <CForm\n                action=\"\"\n                method=\"post\"\n                className=\"form-horizontal\"\n                onSubmit={this.onSubmitConfirmFriendRequest}\n              >\n                <CCardHeader>Confirm Friend</CCardHeader>\n                <CCardBody>\n                  <CFormGroup row>\n                    <CCol md=\"12\">\n                      <CInputGroup>\n                        <CInputGroupPrepend>\n                          <CInputGroupText>\n                            <CIcon name=\"cil-user\" />\n                          </CInputGroupText>\n                        </CInputGroupPrepend>\n                        <CInput\n                          id=\"input2-group2\"\n                          name=\"input2-group2\"\n                          placeholder=\"Confirmation\"\n                          value={this.state.friendsAddress}\n                          onChange={this.onChangeFormInput}\n                        />\n                      </CInputGroup>\n                    </CCol>\n                  </CFormGroup>\n                </CCardBody>\n                <CCardFooter>\n                  <CButton type=\"submit\" size=\"sm\" color=\"success\">\n                    <CIcon name=\"cil-scrubber\" /> Submit\n                  </CButton>\n                  <CButton type=\"reset\" size=\"sm\" color=\"danger\">\n                    <CIcon name=\"cil-ban\" /> Reset\n                  </CButton>\n                </CCardFooter>\n              </CForm>\n            </CCard>\n          </CCol>\n        </CRow>\n        <CRow>\n          <CCol xs=\"12\" md=\"6\" xl=\"6\">\n            <CCard>\n              <CCardHeader>Friends List</CCardHeader>\n              <CCardBody>\n                <div className=\"table-responsive\">\n                  <table className=\"table table-hover table-outline mb-0 \">\n                    <thead className=\"thead-light\">\n                      <tr>\n                        <th>Friends Address</th>\n                        <th>Friends Name</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {this.state.friendsList.map((friend) => (\n                        <tr key={friend}>\n                          <td>\n                            <div>{friend}</div>\n                          </td>\n                          <td>\n                            <div>friend name</div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CCardBody>\n              <CCardFooter>\n                <CButton\n                  type=\"button\"\n                  size=\"sm\"\n                  color=\"success\"\n                  onClick={this.onCheckMyFriends}\n                >\n                  <CIcon name=\"cil-user\" /> Check Friends\n                </CButton>\n                <CButton\n                  type=\"button\"\n                  size=\"sm\"\n                  color=\"danger\"\n                  onClick={this.updateRemovedFriends}\n                >\n                  <CIcon name=\"cil-user-unfollow\" /> Remove Friends\n                </CButton>\n              </CCardFooter>\n            </CCard>\n          </CCol>\n        </CRow>\n        <CRow>\n          <CCol xs=\"12\" sm=\"4\">\n            <CCard>\n              <CCardHeader>Send Debt Request</CCardHeader>\n              <CCardBody>\n                <CForm\n                  action=\"\"\n                  method=\"post\"\n                  onSubmit={this.onSubmitAddDebtRequest}\n                >\n                  <CFormGroup>\n                    <CInputGroup>\n                      <CInput\n                        id=\"fromDebtRequest\"\n                        name=\"playerOne\"\n                        placeholder=\"From\"\n                        autoComplete=\"name\"\n                        value={this.state.playerOne}\n                        onChange={this.onChangeFormInput}\n                      />\n                      <CInputGroupAppend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-user\" />\n                        </CInputGroupText>\n                      </CInputGroupAppend>\n                    </CInputGroup>\n                  </CFormGroup>\n                  <CFormGroup>\n                    <CInputGroup>\n                      <CInput\n                        id=\"toDebtRequest\"\n                        name=\"friendsAddress\"\n                        placeholder=\"To\"\n                        autoComplete=\"To\"\n                        value={this.state.friendsAddress}\n                        onChange={this.onChangeFormInput}\n                      />\n                      <CInputGroupAppend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-user\" />\n                        </CInputGroupText>\n                      </CInputGroupAppend>\n                    </CInputGroup>\n                  </CFormGroup>\n                  <CFormGroup>\n                    <CInputGroup>\n                      <CInput\n                        id=\"amountDebt\"\n                        name=\"providedAmount\"\n                        placeholder=\"Amount\"\n                        autoComplete=\"amount\"\n                        onChange={this.onChangeFormInput}\n                      />\n                      <CInputGroupAppend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-dollar\" />\n                        </CInputGroupText>\n                      </CInputGroupAppend>\n                    </CInputGroup>\n                  </CFormGroup>\n                  <CFormGroup className=\"form-actions\">\n                    <CButton type=\"submit\" size=\"sm\" color=\"secondary\">\n                      Send a Debt Request\n                    </CButton>\n                  </CFormGroup>\n                </CForm>\n              </CCardBody>\n            </CCard>\n          </CCol>\n          <CCol xs=\"12\" sm=\"4\">\n            <CCard>\n              <CCardHeader>Confirm Debt Request</CCardHeader>\n              <CCardBody>\n                <CForm\n                  action=\"\"\n                  method=\"post\"\n                  onSubmit={this.onSubmitConfirmDebtRequest}\n                >\n                  <CFormGroup>\n                    <CInputGroup>\n                      <CInput\n                        id=\"fromConfirm\"\n                        name=\"friendsAddress\"\n                        placeholder=\"from\"\n                        autoComplete=\"From\"\n                        value={this.state.friendsAddress}\n                        onChange={this.onChangeFormInput}\n                      />\n                      <CInputGroupAppend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-user\" />\n                        </CInputGroupText>\n                      </CInputGroupAppend>\n                    </CInputGroup>\n                  </CFormGroup>\n                  <CFormGroup>\n                    <CInputGroup>\n                      <CInput\n                        id=\"toConfirm\"\n                        name=\"playerOne\"\n                        placeholder=\"To\"\n                        autoComplete=\"to\"\n                        value={this.state.playerOne}\n                        onChange={this.onChangeFormInput}\n                      />\n                      <CInputGroupAppend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-user\" />\n                        </CInputGroupText>\n                      </CInputGroupAppend>\n                    </CInputGroup>\n                  </CFormGroup>\n                  <CFormGroup>\n                    <CInputGroup>\n                      <CInput\n                        id=\"amount\"\n                        name=\"providedAmount\"\n                        placeholder=\"Amount\"\n                        autoComplete=\"amount\"\n                        onChange={this.onChangeFormInput}\n                      />\n                      <CInputGroupAppend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-dollar\" />\n                        </CInputGroupText>\n                      </CInputGroupAppend>\n                    </CInputGroup>\n                  </CFormGroup>\n                  <CFormGroup className=\"form-actions\">\n                    <CButton type=\"submit\" size=\"sm\" color=\"secondary\">\n                      Confirm a Debt Request\n                    </CButton>\n                  </CFormGroup>\n                </CForm>\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n        <CRow>\n          <CCol xs=\"12\" md=\"4\" xl=\"4\">\n            <CCard>\n              <CCardHeader>Contracts</CCardHeader>\n              <CCardBody>\n                <div className=\"table-responsive\">\n                  <table className=\"table table-hover table-outline mb-0 \">\n                    <thead className=\"thead-light\">\n                      <tr>\n                        <th>Friends Address</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {this.state.contractsList.map((contract) => (\n                        <tr key={contract}>\n                          <td>\n                            <div>{contract}</div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CCardBody>\n              <CCardFooter>\n                <CButton\n                  type=\"button\"\n                  size=\"sm\"\n                  color=\"success\"\n                  onClick={this.onCheckMyContracts}\n                >\n                  <CIcon name=\"cil-user\" /> Check Contracts\n                </CButton>\n                <CButton\n                  type=\"button\"\n                  size=\"sm\"\n                  color=\"danger\"\n                  onClick={this.onRemoveContractsList}\n                >\n                  <CIcon name=\"cil-user-unfollow\" /> Remove Contracts\n                </CButton>\n              </CCardFooter>\n            </CCard>\n          </CCol>\n          <CCol xs=\"12\" md=\"8\" xl=\"8\">\n            <CCard>\n              <CCardHeader>Exchanges</CCardHeader>\n              <CCardBody>\n                <div className=\"table-responsive\">\n                  <table className=\"table table-hover table-outline mb-0 \">\n                    <thead className=\"thead-light\">\n                      <tr>\n                        <th>from Address</th>\n                        <th>to Address</th>\n                        <th>amount</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {this.state.exchanges === undefined ? (\n                        <p>loading..</p>\n                      ) : (\n                        <tr key={this.state.exchanges.date}>\n                          <td>\n                            <div>{this.state.exchanges.from}</div>\n                          </td>\n                          <td>\n                            <div>{this.state.exchanges.to}</div>\n                          </td>\n                          <td>\n                            <div>{this.state.exchanges.amount}</div>\n                          </td>\n                        </tr>\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </CCardBody>\n              <CCardFooter>\n                <CButton\n                  type=\"button\"\n                  size=\"sm\"\n                  color=\"success\"\n                  onClick={this.onCheckMyExchanges}\n                >\n                  <CIcon name=\"cil-user\" /> Check Exchanges\n                </CButton>\n                <CButton\n                  type=\"button\"\n                  size=\"sm\"\n                  color=\"danger\"\n                  onClick={this.onRemoveExchangesList}\n                >\n                  <CIcon name=\"cil-user-unfollow\" /> Remove Exchanges\n                </CButton>\n              </CCardFooter>\n            </CCard>\n          </CCol>\n        </CRow>\n      </>\n    );\n  }\n}\n\nexport default Dashboard;\n"],"sourceRoot":""}